//
//  pds_Andor3dConfig class methods
//
static PyObject* pds_Andor3dConfig_get    (PyObject*   self, PyObject* args);
static PyObject* pds_Andor3dConfig_set    (PyObject*   self, PyObject* args);

static PyMethodDef pds_Andor3dConfig_methods[] = {
  {"get"   , (PyCFunction)pds_Andor3dConfig_get   , METH_NOARGS  , "Output the configuration"},
  {"set"   , (PyCFunction)pds_Andor3dConfig_set   , METH_VARARGS|METH_KEYWORDS, "Input the configuration"},
  {NULL},
};

DefineXtcType(Andor3dConfig) ;

#include "pdsdata/psddl/andor3d.ddl.h"
#include <new>


//  Return a dictionary of configuration data
#define SetDictMember(name,isFloat)                       \
  { PyObject* v = NULL;                                   \
    if (isFloat)                                          \
      v = PyFloat_FromDouble(cfg->name());                \
    else                                                  \
      v = PyLong_FromUnsignedLong((unsigned)cfg->name()); \
    if (v) {                                              \
      PyDict_SetItemString(o,#name,v);                    \
      Py_DECREF(v);                                       \
    }                                                     \
  }

PyObject* pds_Andor3dConfig_get (PyObject*   self, PyObject* args) 
{
  pdsxtc* xtc = (pdsxtc*)self;
  PyObject* o = PyDict_New();  
  if (xtc->contains.version()==1) { 
    const Pds::Andor3d::ConfigV1* cfg = 
      reinterpret_cast<const Pds::Andor3d::ConfigV1*>(xtc->payload);

    SetDictMember(width,false);
    SetDictMember(height,false);
    SetDictMember(numSensors,false);
    SetDictMember(orgX,false);
    SetDictMember(orgY,false); 
    SetDictMember(binX,false);
    SetDictMember(binY,false);
    SetDictMember(exposureTime,true);
    SetDictMember(coolingTemp,true);
    SetDictMember(fanMode,false);
    SetDictMember(baselineClamp,false);
    SetDictMember(highCapacity,false);
    SetDictMember(gainIndex,false);
    SetDictMember(readoutSpeedIndex,false);
    SetDictMember(exposureEventCode,false);
    SetDictMember(exposureStartDelay,false);
    SetDictMember(numDelayShots,false);

    return o;
  }
  else {
    Py_DECREF(o);
    printf("get(): Unsupported Andor3dConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  }


}
#undef SetDictMember


//  Retrieve configuration data from a Python Dictionary
#define GetDictEnum(name,type)                                          \
  type name;                                                            \
  { PyObject* i = PyDict_GetItemString(o,#name);                        \
    if (i) {                                                            \
      if (PyInt_CheckExact(i))  name = (type) PyInt_AsLong(i);          \
      else if (PyLong_CheckExact(i)) name = (type) PyLong_AsLong(i);    \
      else name = (type) cfg->name();                                   \
    }                                                                   \
    else name = cfg->name(); }


#define GetDictLong(name)                                         \
  unsigned long name;                                             \
  { PyObject* i = PyDict_GetItemString(o,#name);                  \
    if (i) {                                                      \
      if (PyLong_Check(i)) name = PyLong_AsUnsignedLong(i);       \
      else if (PyInt_Check(i)) name = PyInt_AsLong(i);            \
      else name = cfg->name();                                    \
    }                                                             \
    else name = cfg->name(); }


#define GetDictFloat(name)                              \
  double name;                                          \
  { PyObject* i = PyDict_GetItemString(o,#name);        \
    if (i) {                                            \
      if (PyFloat_Check(i)) name = PyFloat_AsDouble(i); \
      else name = cfg->name();                          \
    }                                                   \
    else name = cfg->name(); }


PyObject* pds_Andor3dConfig_set    (PyObject*   self, PyObject* args)
{
  PyObject* o = 0;
  if (PyArg_ParseTuple(args,"O",&o)==0)
    return NULL;

  pdsxtc* xtc = (pdsxtc*)self;
  if (xtc->contains.version()==1) { 
    const Pds::Andor3d::ConfigV1* cfg = 
      reinterpret_cast<const Pds::Andor3d::ConfigV1*>(xtc->payload);

    GetDictLong(width);
    GetDictLong(height);
    GetDictLong(numSensors);
    GetDictLong(orgX);
    GetDictLong(orgY);
    GetDictLong(binX);
    GetDictLong(binY);
    GetDictFloat(exposureTime);
    GetDictFloat(coolingTemp);
    GetDictEnum(fanMode,Pds::Andor3d::ConfigV1::EnumFanMode);
    GetDictLong(baselineClamp);
    GetDictLong(highCapacity);
    GetDictLong(gainIndex);
    GetDictLong(readoutSpeedIndex);
    GetDictLong(exposureEventCode);
    GetDictLong(exposureStartDelay);
    GetDictLong(numDelayShots);
    new(xtc->payload) Pds::Andor3d::ConfigV1((uint32_t) width,
                      (uint32_t)  height,
                      (uint32_t)  numSensors,
                      (uint32_t)  orgX,
                      (uint32_t)  orgY,
                      (uint32_t)  binX,
                      (uint32_t)  binY,
                      (float)     exposureTime,
                      (float)     coolingTemp,
                      fanMode,
                      (uint8_t)   baselineClamp,
                      (uint8_t)   highCapacity,
                      (uint8_t)   gainIndex,
                      (uint16_t)  readoutSpeedIndex,
                      (uint16_t)  exposureEventCode,
                      (uint32_t)  exposureStartDelay,
                      (uint32_t)  numDelayShots); 
    Py_INCREF(Py_None);
    return Py_None;
  }
  else {
    printf("set(): Unsupported Andor3dConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  }

}

#undef GetDictEnum
#undef GetDictLong
#undef GetDictFloat
