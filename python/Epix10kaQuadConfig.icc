//
//  pds_Epix10ka2MConfig class methods
//
static PyObject* pds_Epix10kaQuadConfig_get    (PyObject*   self, PyObject* args);
static PyObject* pds_Epix10kaQuadConfig_set    (PyObject*   self, PyObject* args);
static unsigned  pds_Epix10kaQuadConfig_size   (PyObject*   self);

static PyMethodDef pds_Epix10kaQuadConfig_methods[] = {
  {"get"   , (PyCFunction)pds_Epix10kaQuadConfig_get   , METH_VARARGS|METH_KEYWORDS, "Output the configuration"},
  {"set"   , (PyCFunction)pds_Epix10kaQuadConfig_set   , METH_VARARGS|METH_KEYWORDS, "Input the configuration"},
  {NULL},
};

DefineXtcType(Epix10kaQuadConfig) ;

  
#include "pdsdata/psddl/epix.ddl.h"
#include "pds/config/EpixConfigType.hh"
#include <new>

using namespace Pds::Epix;

//
//  Return a dictionary of configuration data
//

PyObject* pds_Epix10kaQuadConfig_get    (PyObject*   self, PyObject* args)
{
  pdsxtc* xtc = (pdsxtc*)self;
 
  int icycle;
  if (PyArg_ParseTuple(args,"I",&icycle)==0)
    icycle = 0;

  unsigned isize = pds_Epix10kaQuadConfig_size(self);
  unsigned usize = isize*(icycle+1);

  if (xtc->extent < usize)
    return NULL;

  char* ubegin = xtc->payload + isize*icycle;

  if(xtc->contains.version()==1) {
    const Config10kaQuadV1* cfg = 
      reinterpret_cast<const Config10kaQuadV1*>(ubegin);

    PyObject* o = PyDict_New();
    PyDict_SetItemString(o, "evr" , _toPyDict(cfg->evr()));
    PyDict_SetItemString(o, "quad", _toPyDict(cfg->quad()));

    { PyObject* elems = PyList_New(4);
      for(unsigned e=0; e<4; e++)
        PyList_SetItem(elems, e, _toPyDict(cfg->elemCfg(e)));
      PyDict_SetItemString(o, "elemCfg", elems);
    }
    
    return o;
  }

  //  Throw an exception
  return NULL;
}

//
//  Retrieve configuration data from a Python Dictionary
//
PyObject* pds_Epix10kaQuadConfig_set    (PyObject*   self, PyObject* args)
{
  PyObject* o = 0;
  int icycle = 0;
  if (PyArg_ParseTuple(args,"O|I",&o,&icycle)==0)
    return NULL;

  pdsxtc* xtc = (pdsxtc*)self;
      
  unsigned isize = Config10kaQuadV1::_sizeof();
  unsigned usize = isize*(icycle+1);

  if (xtc->extent < usize) {
    char* p = new char[usize];
    memcpy(p, xtc->payload, xtc->extent);
    delete[] xtc->payload;
    xtc->payload = p;
    xtc->extent  = usize;
  }

  char* ubegin = xtc->payload + icycle*isize;

  if (xtc->contains.version()==1) {
    Config10kaQuadV1* cfg = reinterpret_cast<Config10kaQuadV1*>(ubegin);
    _toPgpEvrConfig( PyDict_GetItemString(o,"evr"), &cfg->evr());

    _toEpix10kaQuadConfig( PyDict_GetItemString(o,"quad"), &cfg->quad());

    for(unsigned e=0; e<4; e++)
      _toConfig10ka( PyList_GetItem(PyDict_GetItemString(o, "elemCfg"), e),
                     &cfg->elemCfg(e) );
  }

  Py_INCREF(Py_None);
  return Py_None;
}

unsigned pds_Epix10kaQuadConfig_size(PyObject* self)
{
  pdsxtc* xtc = (pdsxtc*)self;
  if (xtc->contains.id() == Pds::TypeId::Id_Epix10kaQuadConfig) {
    switch(xtc->contains.version()) {
      case 1:  return reinterpret_cast<Pds::Epix::Config10kaQuadV1*>(xtc->payload)->_sizeof();
     default: break;
    }
  }

  return 0;
}


