//
//  pds_IpimbConfig class methods
//
static PyObject* pds_AndorConfig_get    (PyObject*   self, PyObject* args);
static PyObject* pds_AndorConfig_set    (PyObject*   self, PyObject* args);

static PyMethodDef pds_AndorConfig_methods[] = {
  {"get"   , (PyCFunction)pds_AndorConfig_get   , METH_NOARGS  , "Output the configuration"},
  {"set"   , (PyCFunction)pds_AndorConfig_set   , METH_KEYWORDS, "Input the configuration"},
  {NULL},
};

DefineXtcType(AndorConfig) ;

#include "pdsdata/psddl/andor.ddl.h"
#include <new>


//  Return a dictionary of configuration data
#define SetDictMember(name,isFloat)                                                       \
  { if (isFloat)                                                                            \
      PyDict_SetItemString(o,#name,PyFloat_FromDouble(cfg->name()));                      \
    else                                                                                    \
      PyDict_SetItemString(o,#name,PyLong_FromUnsignedLong((unsigned)cfg->name())); }

PyObject* pds_AndorConfig_get (PyObject*   self, PyObject* args) 
{
  pdsxtc* xtc = (pdsxtc*)self;
  PyObject* o = PyDict_New();  
  if (xtc->contains.version()==1) { 
    const Pds::Andor::ConfigV1* cfg = 
      reinterpret_cast<const Pds::Andor::ConfigV1*>(xtc->payload);

    SetDictMember(width,false);
    SetDictMember(height,false);
    SetDictMember(orgX,false);
    SetDictMember(orgY,false); 
    SetDictMember(binX,false);
    SetDictMember(binY,false);
    SetDictMember(exposureTime,true);
    SetDictMember(coolingTemp,true);
    SetDictMember(fanMode,false);
    SetDictMember(baselineClamp,false);
    SetDictMember(highCapacity,false);
    SetDictMember(gainIndex,false);
    SetDictMember(readoutSpeedIndex,false);
    SetDictMember(exposureEventCode,false);
    SetDictMember(numDelayShots,false);

    return o;
  }
  else {
    Py_DECREF(o);
    printf("get(): Unsupported AndorConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  }


}
#undef SetDictMember


//  Retrieve configuration data from a Python Dictionary
#define SetDictMember(name)                                          \
  double name;                                                       \
  { PyObject* i = PyDict_GetItemString(o,#name);                     \
    if (i) {                                                         \
      if(PyFloat_Check(i))  name = PyFloat_AsDouble(i);              \
      else if (PyInt_CheckExact(i)) name = (double) PyInt_AsLong(i); \
      else  name = (double) PyLong_AsUnsignedLong(i);                \
    }                                                                \
    else { \
  printf("Unknown %s\n",#name); \
  name = (double) cfg->name();  } }              


PyObject* pds_AndorConfig_set    (PyObject*   self, PyObject* args)
{
  PyObject* o = 0;
  if (PyArg_ParseTuple(args,"O",&o)==0)
    return NULL;

  pdsxtc* xtc = (pdsxtc*)self;
  if (xtc->contains.version()==1) { 
    const Pds::Andor::ConfigV1* cfg = 
      reinterpret_cast<const Pds::Andor::ConfigV1*>(xtc->payload);

    SetDictMember(width);
    SetDictMember(height);
    SetDictMember(orgX);
    SetDictMember(orgY);
    SetDictMember(binX);
    SetDictMember(binY);
    SetDictMember(exposureTime);
    SetDictMember(coolingTemp);
    SetDictMember(fanMode);
    SetDictMember(baselineClamp);
    SetDictMember(highCapacity);
    SetDictMember(gainIndex);
    SetDictMember(readoutSpeedIndex);
    SetDictMember(exposureEventCode);
    SetDictMember(numDelayShots);
    new(xtc->payload) Pds::Andor::ConfigV1((uint32_t) width,
                      (uint32_t)  height,
                      (uint32_t)  orgX,
                      (uint32_t)  orgY,
                      (uint32_t)  binX,
                      (uint32_t)  binY,
                      (float)     exposureTime,
                      (float)     coolingTemp,
                      Pds::Andor::ConfigV1::EnumFanMode(fanMode),
                      (uint8_t)   baselineClamp,
                      (uint8_t)   highCapacity,
                      (uint8_t)   gainIndex,
                      (uint16_t)  readoutSpeedIndex,
                      (uint16_t)  exposureEventCode,
                      (uint16_t)  numDelayShots); 
    Py_INCREF(Py_None);
    return Py_None;
  }
  else {
    printf("set(): Unsupported AndorConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  }

}

#undef SetDictMember

