//
//  pds_JungfrauConfig class methods
//
static PyObject* pds_JungfrauConfig_get      (PyObject*   self, PyObject* args);
static PyObject* pds_JungfrauConfig_set      (PyObject*   self, PyObject* args);
static PyObject* pds_JungfrauConfig_enum     (PyObject*   self, PyObject* args);
static unsigned  pds_JungfrauConfig_size     (PyObject*   self);

static PyMethodDef pds_JungfrauConfig_methods[] = {
  {"get"        , (PyCFunction)pds_JungfrauConfig_get   , METH_VARARGS|METH_KEYWORDS, "Output the configuration"},
  {"set"        , (PyCFunction)pds_JungfrauConfig_set   , METH_VARARGS|METH_KEYWORDS, "Input the configuration"},
  {"get_enums"  , (PyCFunction)pds_JungfrauConfig_enum  , METH_NOARGS  , "Output enum constants"},
  {NULL},
};

DefineXtcType(JungfrauConfig)


#include "pdsdata/psddl/jungfrau.ddl.h"
#include <new>


// Return a dictionary of enum types in config
#define SetEnum(name,type,dict)                               \
  { PyObject* v = PyInt_FromLong(Pds::Jungfrau::type::name);  \
    if (v) {                                                  \
      PyDict_SetItemString(dict,#name,v);                     \
      Py_DECREF(v);                                           \
    }                                                         \
  }

#define SetEnumDict(name,dict)              \
  { PyDict_SetItemString(o,#name,dict);     \
    Py_DECREF(dict); }

static PyObject* get_gainV1_enum()
{
  PyObject* gain_enum = PyDict_New();
  SetEnum(Normal,ConfigV1,gain_enum);
  SetEnum(FixedGain1,ConfigV1,gain_enum);
  SetEnum(FixedGain2,ConfigV1,gain_enum);
  SetEnum(ForcedGain1,ConfigV1,gain_enum);
  SetEnum(ForcedGain2,ConfigV1,gain_enum);
  SetEnum(HighGain0,ConfigV1,gain_enum);

  return gain_enum;
}

static PyObject* get_gainV2_enum()
{
  PyObject* gain_enum = PyDict_New();
  SetEnum(Normal,ConfigV2,gain_enum);
  SetEnum(FixedGain1,ConfigV2,gain_enum);
  SetEnum(FixedGain2,ConfigV2,gain_enum);
  SetEnum(ForcedGain1,ConfigV2,gain_enum);
  SetEnum(ForcedGain2,ConfigV2,gain_enum);
  SetEnum(HighGain0,ConfigV2,gain_enum);

  return gain_enum;
}

static PyObject* get_gainV3_enum()
{
  PyObject* gain_enum = PyDict_New();
  SetEnum(Normal,ConfigV3,gain_enum);
  SetEnum(FixedGain1,ConfigV3,gain_enum);
  SetEnum(FixedGain2,ConfigV3,gain_enum);
  SetEnum(ForcedGain1,ConfigV3,gain_enum);
  SetEnum(ForcedGain2,ConfigV3,gain_enum);
  SetEnum(HighGain0,ConfigV3,gain_enum);

  return gain_enum;
}

static PyObject* get_gainV4_enum()
{
  PyObject* gain_enum = PyDict_New();
  SetEnum(Normal,ConfigV4,gain_enum);
  SetEnum(FixedGain1,ConfigV4,gain_enum);
  SetEnum(FixedGain2,ConfigV4,gain_enum);
  SetEnum(ForcedGain1,ConfigV4,gain_enum);
  SetEnum(ForcedGain2,ConfigV4,gain_enum);
  SetEnum(HighGain0,ConfigV4,gain_enum);

  return gain_enum;
}

static PyObject* get_speedV1_enum()
{
  PyObject* speed_enum = PyDict_New();
  SetEnum(Quarter,ConfigV1,speed_enum);
  SetEnum(Half,ConfigV1,speed_enum);

  return speed_enum;
}

static PyObject* get_speedV2_enum()
{ 
  PyObject* speed_enum = PyDict_New();
  SetEnum(Quarter,ConfigV2,speed_enum);
  SetEnum(Half,ConfigV2,speed_enum);

  return speed_enum;
}

static PyObject* get_speedV3_enum()
{
  PyObject* speed_enum = PyDict_New();
  SetEnum(Quarter,ConfigV3,speed_enum);
  SetEnum(Half,ConfigV3,speed_enum);

  return speed_enum;
}

static PyObject* get_speedV4_enum()
{
  PyObject* speed_enum = PyDict_New();
  SetEnum(Quarter,ConfigV4,speed_enum);
  SetEnum(Half,ConfigV4,speed_enum);

  return speed_enum;
}

PyObject* pds_JungfrauConfig_enum (PyObject*   self, PyObject* args)
{
  pdsxtc* xtc = (pdsxtc*)self;
  PyObject* o = PyDict_New();
  if (xtc->contains.version()==1) {

    SetEnumDict(GainMode,get_gainV1_enum());
    SetEnumDict(SpeedMode,get_speedV1_enum());

    return o;
  }
  else if (xtc->contains.version()==2) {

    SetEnumDict(GainMode,get_gainV2_enum());
    SetEnumDict(SpeedMode,get_speedV2_enum());

    return o;
  }
  else if (xtc->contains.version()==3) {

    SetEnumDict(GainMode,get_gainV3_enum());
    SetEnumDict(SpeedMode,get_speedV3_enum());

    return o;
  }
  else if (xtc->contains.version()==4) {

    SetEnumDict(GainMode,get_gainV4_enum());
    SetEnumDict(SpeedMode,get_speedV4_enum());

    return o;
  }
  else {
    Py_DECREF(o);
    printf("enum(): Unsupported JungfrauConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  }

}

#undef SetEnum
#undef SetEnumDict


//  Add an item to the configuraion dictionary
#define SetDictMember(name,isFloat,isEnum,isLongLong)                   \
  { PyObject* v = NULL;                                                 \
    if (isFloat)                                                        \
      v = PyFloat_FromDouble(cfg->name());                              \
    else if (isEnum)                                                    \
      v = PyInt_FromLong((signed)cfg->name());                          \
    else if (isLongLong)                                                \
      v = PyLong_FromUnsignedLongLong((unsigned long long)cfg->name()); \
    else                                                                \
      v = PyLong_FromUnsignedLong((unsigned long)cfg->name());          \
    if (v) {                                                            \
      PyDict_SetItemString(o,#name,v);                                  \
      Py_DECREF(v);                                                     \
    }                                                                   \
  }

// Add a sub-dictionary as an item to the configuraion dictionary
#define SetDictSubMember(name, func)    \
  { PyObject* obj = func(cfg);          \
    PyDict_SetItemString(o,#name,obj);  \
    Py_DECREF(obj); }

static PyObject* get_module_config(const Pds::Jungfrau::ConfigV3* modcfg)
{
  PyObject* modcfg_list = PyList_New(modcfg->numberOfModules());
  for (unsigned i=0; i<modcfg->numberOfModules(); i++) {
    const Pds::Jungfrau::ModuleConfigV1* cfg = &modcfg->moduleConfig(i);
    PyObject* o = PyDict_New();
    SetDictMember(serialNumber,false,false,true);
    SetDictMember(moduleVersion,false,false,true);
    SetDictMember(firmwareVersion,false,false,true);
    PyList_SetItem(modcfg_list, i, o);
  }

  return modcfg_list;
}

static PyObject* get_module_config(const Pds::Jungfrau::ConfigV4* modcfg)
{
  PyObject* modcfg_list = PyList_New(modcfg->numberOfModules());
  for (unsigned i=0; i<modcfg->numberOfModules(); i++) {
    const Pds::Jungfrau::ModuleConfigV1* cfg = &modcfg->moduleConfig(i);
    PyObject* o = PyDict_New();
    SetDictMember(serialNumber,false,false,true);
    SetDictMember(moduleVersion,false,false,true);
    SetDictMember(firmwareVersion,false,false,true);
    PyList_SetItem(modcfg_list, i, o);
  }

  return modcfg_list;
}

PyObject* pds_JungfrauConfig_get  (PyObject*   self, PyObject* args)
{
  pdsxtc* xtc = (pdsxtc*)self;

  int icycle = 0;
  if (PyArg_ParseTuple(args,"|I",&icycle)==0)
    return NULL;

  unsigned isize = pds_JungfrauConfig_size(self);
  unsigned usize = isize*(icycle+1);

  if (xtc->extent < usize)
    return NULL;

  char* ubegin = xtc->payload + isize*icycle;

  PyObject* o = PyDict_New();
  if (xtc->contains.version()==1) {
    const Pds::Jungfrau::ConfigV1* cfg =
      reinterpret_cast<const Pds::Jungfrau::ConfigV1*>(ubegin);

    
    SetDictMember(numberOfModules,false,false,false);
    SetDictMember(numberOfRowsPerModule,false,false,false);
    SetDictMember(numberOfColumnsPerModule,false,false,false);
    SetDictMember(biasVoltage,false,false,false);
    SetDictMember(gainMode,false,true,false);
    SetDictMember(speedMode,false,true,false);
    SetDictMember(triggerDelay,true,false,false);
    SetDictMember(exposureTime,true,false,false);

    return o;
  }
  else if (xtc->contains.version()==2) {
    const Pds::Jungfrau::ConfigV2* cfg =
      reinterpret_cast<const Pds::Jungfrau::ConfigV2*>(ubegin);

    SetDictMember(numberOfModules,false,false,false);
    SetDictMember(numberOfRowsPerModule,false,false,false);
    SetDictMember(numberOfColumnsPerModule,false,false,false);
    SetDictMember(biasVoltage,false,false,false);
    SetDictMember(gainMode,false,true,false);
    SetDictMember(speedMode,false,true,false);
    SetDictMember(triggerDelay,true,false,false);
    SetDictMember(exposureTime,true,false,false);
    SetDictMember(exposurePeriod,true,false,false);
    SetDictMember(vb_ds,false,false,false);
    SetDictMember(vb_comp,false,false,false);
    SetDictMember(vb_pixbuf,false,false,false);
    SetDictMember(vref_ds,false,false,false);
    SetDictMember(vref_comp,false,false,false);
    SetDictMember(vref_prech,false,false,false);
    SetDictMember(vin_com,false,false,false);
    SetDictMember(vdd_prot,false,false,false);

    return o;
  }
  else if (xtc->contains.version()==3) {
    const Pds::Jungfrau::ConfigV3* cfg =
      reinterpret_cast<const Pds::Jungfrau::ConfigV3*>(ubegin);

    SetDictMember(numberOfModules,false,false,false);
    SetDictMember(numberOfRowsPerModule,false,false,false);
    SetDictMember(numberOfColumnsPerModule,false,false,false);
    SetDictMember(biasVoltage,false,false,false);
    SetDictMember(gainMode,false,true,false);
    SetDictMember(speedMode,false,true,false);
    SetDictMember(triggerDelay,true,false,false);
    SetDictMember(exposureTime,true,false,false);
    SetDictMember(exposurePeriod,true,false,false);
    SetDictMember(vb_ds,false,false,false);
    SetDictMember(vb_comp,false,false,false);
    SetDictMember(vb_pixbuf,false,false,false);
    SetDictMember(vref_ds,false,false,false);
    SetDictMember(vref_comp,false,false,false);
    SetDictMember(vref_prech,false,false,false);
    SetDictMember(vin_com,false,false,false);
    SetDictMember(vdd_prot,false,false,false);
    SetDictSubMember(moduleConfig, get_module_config);

    return o;
  }
  else if (xtc->contains.version()==4) {
    const Pds::Jungfrau::ConfigV4* cfg =
      reinterpret_cast<const Pds::Jungfrau::ConfigV4*>(ubegin);

    SetDictMember(numberOfModules,false,false,false);
    SetDictMember(numberOfRowsPerModule,false,false,false);
    SetDictMember(numberOfColumnsPerModule,false,false,false);
    SetDictMember(biasVoltage,false,false,false);
    SetDictMember(gainMode,false,true,false);
    SetDictMember(speedMode,false,true,false);
    SetDictMember(triggerDelay,true,false,false);
    SetDictMember(exposureTime,true,false,false);
    SetDictMember(exposurePeriod,true,false,false);
    SetDictMember(vb_ds,false,false,false);
    SetDictMember(vb_comp,false,false,false);
    SetDictMember(vb_pixbuf,false,false,false);
    SetDictMember(vref_ds,false,false,false);
    SetDictMember(vref_comp,false,false,false);
    SetDictMember(vref_prech,false,false,false);
    SetDictMember(vin_com,false,false,false);
    SetDictMember(vdd_prot,false,false,false);
    SetDictSubMember(moduleConfig, get_module_config);

    return o;
  }
  else {
    Py_DECREF(o);
    printf("get(): Unsupported JungfrauConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  }
}
#undef SetDictMember
#undef SetDictSubMember

//  Retrieve configuration data from a Python Dictionary
#define GetDictEnum(name,type)                                          \
  type name;                                                            \
  { PyObject* i = PyDict_GetItemString(o,#name);                        \
    if (i) {                                                            \
      if (PyInt_CheckExact(i))  name = (type) PyInt_AsLong(i);          \
      else if (PyLong_CheckExact(i)) name = (type) PyLong_AsLong(i);    \
      else name = (type) cfg->name();                                   \
    }                                                                   \
    else name = cfg->name(); }

#define GetDictLong(name)                                         \
  unsigned long name;                                             \
  { PyObject* i = PyDict_GetItemString(o,#name);                  \
    if (i) {                                                      \
      if (PyLong_Check(i)) name = PyLong_AsUnsignedLong(i);       \
      else if (PyInt_Check(i)) name = PyInt_AsLong(i);            \
      else name = cfg->name();                                    \
    }                                                             \
    else name = cfg->name(); }

#define GetDictLongLong(name)                                     \
  unsigned long long name;                                        \
  { PyObject* i = PyDict_GetItemString(o,#name);                  \
    if (i) {                                                      \
      if (PyLong_Check(i)) name = PyLong_AsUnsignedLongLong(i);   \
      else if (PyInt_Check(i)) name = PyInt_AsLong(i);            \
      else name = cfg->name();                                    \
    }                                                             \
    else name = cfg->name(); }

#define GetDictFloat(name)                              \
  double name;                                          \
  { PyObject* i = PyDict_GetItemString(o,#name);        \
    if (i) {                                            \
      if (PyFloat_Check(i)) name = PyFloat_AsDouble(i); \
      else name = cfg->name();                          \
    }                                                   \
    else name = cfg->name(); }

#define GetModuleConfigArray(name,size,version)           \
  Pds::Jungfrau::ModuleConfigV##version name[size];       \
  { PyObject* i = PyDict_GetItemString(o,#name);          \
    if (i && PyList_Check(i)) {                           \
      fill_module_config_v##version(i,name);              \
    }                                                     \
    else {                                                \
      for (unsigned i=0; i<cfg->numberOfModules(); i++)   \
        name[i] = cfg->name(i);                           \
    }                                                     \
  }


static void fill_module_config_v1(PyObject* l, Pds::Jungfrau::ModuleConfigV1* cfg)
{
  Py_ssize_t num = PyList_Size(l);
  for (unsigned i=0; i<num; i++) {
    PyObject* o = PyList_GetItem(l,i);
    GetDictLongLong(serialNumber);
    GetDictLongLong(moduleVersion);
    GetDictLongLong(firmwareVersion);
    new(&cfg[i]) Pds::Jungfrau::ModuleConfigV1(serialNumber, moduleVersion, firmwareVersion);
  }
}

PyObject* pds_JungfrauConfig_set  (PyObject*   self, PyObject* args)
{
  PyObject* o = 0;
  int icycle = 0;
  if (PyArg_ParseTuple(args,"O|I",&o,&icycle)==0)
    return NULL;

  pdsxtc* xtc = (pdsxtc*)self;

  unsigned isize = pds_JungfrauConfig_size(self);
  unsigned usize = isize*(icycle+1);

  if (xtc->extent < usize) {
    char* p = new char[usize];
    memcpy(p, xtc->payload, xtc->extent);
    delete[] xtc->payload;

    xtc->payload = p;
    xtc->extent  = usize;
  }

  char* ubegin = xtc->payload + icycle*isize;

  if (xtc->contains.version()==1) {
    const Pds::Jungfrau::ConfigV1* cfg =
      reinterpret_cast<const Pds::Jungfrau::ConfigV1*>(ubegin);

    GetDictLong(numberOfModules);
    GetDictLong(numberOfRowsPerModule);
    GetDictLong(numberOfColumnsPerModule);
    GetDictLong(biasVoltage);
    GetDictEnum(gainMode,Pds::Jungfrau::ConfigV1::GainMode);
    GetDictEnum(speedMode,Pds::Jungfrau::ConfigV1::SpeedMode);
    GetDictFloat(triggerDelay);
    GetDictFloat(exposureTime);
    new(ubegin) Pds::Jungfrau::ConfigV1((uint32_t) numberOfModules,
                                        (uint32_t) numberOfRowsPerModule,
                                        (uint32_t) numberOfColumnsPerModule,
                                        (uint32_t) biasVoltage,
                                        gainMode,
                                        speedMode,
                                        triggerDelay,
                                        exposureTime);

    Py_INCREF(Py_None);
    return Py_None;
  }
  else if (xtc->contains.version()==2) {
    const Pds::Jungfrau::ConfigV2* cfg =
      reinterpret_cast<const Pds::Jungfrau::ConfigV2*>(ubegin);

    GetDictLong(numberOfModules);
    GetDictLong(numberOfRowsPerModule);
    GetDictLong(numberOfColumnsPerModule);
    GetDictLong(biasVoltage);
    GetDictEnum(gainMode,Pds::Jungfrau::ConfigV2::GainMode);
    GetDictEnum(speedMode,Pds::Jungfrau::ConfigV2::SpeedMode);
    GetDictFloat(triggerDelay);
    GetDictFloat(exposureTime);
    GetDictFloat(exposurePeriod);
    GetDictLong(vb_ds);
    GetDictLong(vb_comp);
    GetDictLong(vb_pixbuf);
    GetDictLong(vref_ds);
    GetDictLong(vref_comp);
    GetDictLong(vref_prech);
    GetDictLong(vin_com);
    GetDictLong(vdd_prot);
    new(ubegin) Pds::Jungfrau::ConfigV2((uint32_t) numberOfModules,
                                        (uint32_t) numberOfRowsPerModule,
                                        (uint32_t) numberOfColumnsPerModule,
                                        (uint32_t) biasVoltage,
                                        gainMode,
                                        speedMode,
                                        triggerDelay,
                                        exposureTime,
                                        exposurePeriod,
                                        (uint16_t) vb_ds,
                                        (uint16_t) vb_comp,
                                        (uint16_t) vb_pixbuf,
                                        (uint16_t) vref_ds,
                                        (uint16_t) vref_comp,
                                        (uint16_t) vref_prech,
                                        (uint16_t) vin_com,
                                        (uint16_t) vdd_prot);

    Py_INCREF(Py_None);
    return Py_None;
  }
  else if (xtc->contains.version()==3) {
    const Pds::Jungfrau::ConfigV3* cfg =
      reinterpret_cast<const Pds::Jungfrau::ConfigV3*>(ubegin);

    GetDictLong(numberOfModules);
    GetDictLong(numberOfRowsPerModule);
    GetDictLong(numberOfColumnsPerModule);
    GetDictLong(biasVoltage);
    GetDictEnum(gainMode,Pds::Jungfrau::ConfigV3::GainMode);
    GetDictEnum(speedMode,Pds::Jungfrau::ConfigV3::SpeedMode);
    GetDictFloat(triggerDelay);
    GetDictFloat(exposureTime);
    GetDictFloat(exposurePeriod);
    GetDictLong(vb_ds);
    GetDictLong(vb_comp);
    GetDictLong(vb_pixbuf);
    GetDictLong(vref_ds);
    GetDictLong(vref_comp);
    GetDictLong(vref_prech);
    GetDictLong(vin_com);
    GetDictLong(vdd_prot);
    GetModuleConfigArray(moduleConfig, Pds::Jungfrau::ConfigV3::MaxModulesPerDetector, 1);

    new(ubegin) Pds::Jungfrau::ConfigV3((uint32_t) numberOfModules,
                                        (uint32_t) numberOfRowsPerModule,
                                        (uint32_t) numberOfColumnsPerModule,
                                        (uint32_t) biasVoltage,
                                        gainMode,
                                        speedMode,
                                        triggerDelay,
                                        exposureTime,
                                        exposurePeriod,
                                        (uint16_t) vb_ds,
                                        (uint16_t) vb_comp,
                                        (uint16_t) vb_pixbuf,
                                        (uint16_t) vref_ds,
                                        (uint16_t) vref_comp,
                                        (uint16_t) vref_prech,
                                        (uint16_t) vin_com,
                                        (uint16_t) vdd_prot,
                                        moduleConfig);

    Py_INCREF(Py_None);
    return Py_None;
  }
  else if (xtc->contains.version()==4) {
    const Pds::Jungfrau::ConfigV4* cfg =
      reinterpret_cast<const Pds::Jungfrau::ConfigV4*>(ubegin);

    GetDictLong(numberOfModules);
    GetDictLong(numberOfRowsPerModule);
    GetDictLong(numberOfColumnsPerModule);
    GetDictLong(biasVoltage);
    GetDictEnum(gainMode,Pds::Jungfrau::ConfigV4::GainMode);
    GetDictEnum(speedMode,Pds::Jungfrau::ConfigV4::SpeedMode);
    GetDictFloat(triggerDelay);
    GetDictFloat(exposureTime);
    GetDictFloat(exposurePeriod);
    GetDictLong(vb_ds);
    GetDictLong(vb_comp);
    GetDictLong(vb_pixbuf);
    GetDictLong(vref_ds);
    GetDictLong(vref_comp);
    GetDictLong(vref_prech);
    GetDictLong(vin_com);
    GetDictLong(vdd_prot);
    GetModuleConfigArray(moduleConfig, Pds::Jungfrau::ConfigV4::MaxModulesPerDetector, 1);

    new(ubegin) Pds::Jungfrau::ConfigV4((uint32_t) numberOfModules,
                                        (uint32_t) numberOfRowsPerModule,
                                        (uint32_t) numberOfColumnsPerModule,
                                        (uint32_t) biasVoltage,
                                        gainMode,
                                        speedMode,
                                        triggerDelay,
                                        exposureTime,
                                        exposurePeriod,
                                        (uint16_t) vb_ds,
                                        (uint16_t) vb_comp,
                                        (uint16_t) vb_pixbuf,
                                        (uint16_t) vref_ds,
                                        (uint16_t) vref_comp,
                                        (uint16_t) vref_prech,
                                        (uint16_t) vin_com,
                                        (uint16_t) vdd_prot,
                                        moduleConfig);

    Py_INCREF(Py_None);
    return Py_None;
  }

  else {
    printf("set(): Unsupported JungfrauConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  }
}
#undef GetDictEnum
#undef GetDictLong
#undef GetDictLongLong
#undef GetDictFloat
#undef GetModuleConfigArray

unsigned pds_JungfrauConfig_size(PyObject* self)
{
  pdsxtc* xtc = (pdsxtc*)self;
  if (xtc->contains.id() == Pds::TypeId::Id_JungfrauConfig) {
    switch(xtc->contains.version()) {
      case 1:  return sizeof(Pds::Jungfrau::ConfigV1);
      case 2:  return sizeof(Pds::Jungfrau::ConfigV2);
      case 3:  return sizeof(Pds::Jungfrau::ConfigV3);
      case 4:  return sizeof(Pds::Jungfrau::ConfigV4);
     default: break;
    }
  }

  return 0;
}
