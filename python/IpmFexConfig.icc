//
//  pds_IpmFexConfig class methods
//
static PyObject* pds_IpmFexConfig_get    (PyObject*   self, PyObject* args);
static PyObject* pds_IpmFexConfig_set    (PyObject*   self, PyObject* args);


static PyMethodDef pds_IpmFexConfig_methods[] = {
  {"get"   , (PyCFunction)pds_IpmFexConfig_get   , METH_NOARGS  , "Output the configuration"},
  {"set"   , (PyCFunction)pds_IpmFexConfig_set   , METH_KEYWORDS, "Input the configuration"},
  {NULL},
};

DefineXtcType(IpmFexConfig) ;

#include "pdsdata/lusi/IpmFexConfigV1.hh"
#include "pdsdata/lusi/IpmFexConfigV2.hh"
#include "pdsdata/lusi/DiodeFexConfigV1.hh"
#include "pdsdata/lusi/DiodeFexConfigV2.hh"


PyObject* pds_IpmFexConfig_get (PyObject*   self, PyObject* args) 
{
  pdsxtc* xtc = (pdsxtc*)self;
  PyObject* o = PyDict_New();  
  if (xtc->contains.version()==1) {
    const Pds::Lusi::IpmFexConfigV1* v1 = 
      reinterpret_cast<const Pds::Lusi::IpmFexConfigV1*>(xtc->payload);
    unsigned channels = Pds::Lusi::IpmFexConfigV1::NCHANNELS;
    unsigned ranges  = Pds::Lusi::DiodeFexConfigV1::NRANGES;
    { PyObject* chs = PyList_New(channels);
      for(unsigned j=0; j<channels; j++) {
  const Pds::Lusi::DiodeFexConfigV1& d = v1->diode[j];
  PyObject* ch = PyDict_New();
        { PyObject* b = PyList_New(ranges);
          for(unsigned k=0; k<ranges; k++) 
            PyList_SetItem(b,k,PyFloat_FromDouble(d.base[k]));
    PyDict_SetItemString(ch,"base",b); }
        { PyObject* b = PyList_New(ranges);
          for(unsigned k=0; k<ranges; k++) 
            PyList_SetItem(b,k,PyFloat_FromDouble(d.scale[k]));
    PyDict_SetItemString(ch,"scale",b); }
  PyList_SetItem(chs,j,ch);
      }
      PyDict_SetItemString(o,"diodes",chs); }
    PyDict_SetItemString(o,"xscale",PyFloat_FromDouble(v1->xscale));
    PyDict_SetItemString(o,"yscale",PyFloat_FromDouble(v1->yscale));
    return o;
  }
  else if (xtc->contains.version()==2) {
    const Pds::Lusi::IpmFexConfigV2* v1 = 
      reinterpret_cast<const Pds::Lusi::IpmFexConfigV2*>(xtc->payload);
    unsigned channels = Pds::Lusi::IpmFexConfigV2::NCHANNELS;
//    unsigned ranges  = Pds::Lusi::DiodeFexConfigV2::NRANGES;
    unsigned ranges  = 8;
    { PyObject* chs = PyList_New(channels);
      for(unsigned j=0; j<channels; j++) {
  const Pds::Lusi::DiodeFexConfigV2& d = v1->diode[j];
  PyObject* ch = PyDict_New();
        { PyObject* b = PyList_New(ranges);
          for(unsigned k=0; k<ranges; k++) 
            PyList_SetItem(b,k,PyFloat_FromDouble(d.base[k]));
    PyDict_SetItemString(ch,"base",b); }
        { PyObject* b = PyList_New(ranges);
          for(unsigned k=0; k<ranges; k++) 
            PyList_SetItem(b,k,PyFloat_FromDouble(d.scale[k]));
    PyDict_SetItemString(ch,"scale",b); }
  PyList_SetItem(chs,j,ch);
      }
      PyDict_SetItemString(o,"diodes",chs); }
    PyDict_SetItemString(o,"xscale",PyFloat_FromDouble(v1->xscale));
    PyDict_SetItemString(o,"yscale",PyFloat_FromDouble(v1->yscale));

    PyErr_Clear();

    return o;
  }
  else {
    Py_DECREF(o);
    printf("get(): Unsupported IpmFexConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  }

}


//  Retrieve configuration data from a Python Dictionary
#define SetDictMember(name,configData)                 \
  { PyObject* data = PyDict_GetItemString(o,name);     \
    if (data)  configData = PyFloat_AsDouble(data);  }

PyObject* pds_IpmFexConfig_set    (PyObject*   self, PyObject* args)
{
  PyObject* o;
  if (PyArg_ParseTuple(args,"O",&o)==0)
    return NULL;

  pdsxtc* xtc = (pdsxtc*)self;
  if (xtc->contains.version()==1) {
    Pds::Lusi::IpmFexConfigV1* v1 = 
      reinterpret_cast<Pds::Lusi::IpmFexConfigV1*>(xtc->payload);
    unsigned channels = Pds::Lusi::IpmFexConfigV1::NCHANNELS;
    unsigned ranges   = Pds::Lusi::DiodeFexConfigV1::NRANGES;
    PyObject* chs = PyDict_GetItemString(o,"diodes");
    if (chs) {
    for(unsigned j=0; j<channels; j++) {
      Pds::Lusi::DiodeFexConfigV1& d = v1->diode[j];
      PyObject* ch = PyList_GetItem(chs,j);
      if (ch) {
      { PyObject* i = PyDict_GetItemString(ch,"base");
        if (i)
          for(unsigned k=0; k<ranges; k++) {
            PyObject* it = PyList_GetItem(i,k);
        if (it)
          d.base[k] = PyFloat_AsDouble(it);
        } }
      { PyObject* i = PyDict_GetItemString(ch,"scale");
        if (i)
          for(unsigned k=0; k<ranges; k++) {
            PyObject* it = PyList_GetItem(i,k);
        if (it)
          d.scale[k] = PyFloat_AsDouble(it);
        } }
      }
    }
    }
    if ((chs=PyDict_GetItemString(o,"xscale")))
      v1->xscale = PyFloat_AsDouble(chs);
    if ((chs=PyDict_GetItemString(o,"yscale")))
      v1->yscale = PyFloat_AsDouble(chs);

    Py_INCREF(Py_None);
    return Py_None;
  }
  else if (xtc->contains.version()==2) {
    Pds::Lusi::IpmFexConfigV2* v1 = 
      reinterpret_cast<Pds::Lusi::IpmFexConfigV2*>(xtc->payload);
    unsigned channels = Pds::Lusi::IpmFexConfigV2::NCHANNELS;
//    unsigned ranges   = Pds::Lusi::DiodeFexConfigV2::NRANGES;
    unsigned ranges   = 8;
    PyObject* chs = PyDict_GetItemString(o,"diodes");
    if (chs) {
    for(unsigned j=0; j<channels; j++) {
      Pds::Lusi::DiodeFexConfigV2& d = v1->diode[j];
      PyObject* ch = PyList_GetItem(chs,j);
      if (ch) {
      { PyObject* i = PyDict_GetItemString(ch,"base");
        if (i)
          for(unsigned k=0; k<ranges; k++) {
            PyObject* it = PyList_GetItem(i,k);
        if (it)
          d.base[k] = PyFloat_AsDouble(it);
        } }
      { PyObject* i = PyDict_GetItemString(ch,"scale");
        if (i)
          for(unsigned k=0; k<ranges; k++) {
            PyObject* it = PyList_GetItem(i,k);
        if (it)
          d.scale[k] = PyFloat_AsDouble(it);
        } }
      }
    }
    }
    if ((chs=PyDict_GetItemString(o,"xscale")))
      v1->xscale = PyFloat_AsDouble(chs);
    if ((chs=PyDict_GetItemString(o,"yscale")))
      v1->yscale = PyFloat_AsDouble(chs);

    Py_INCREF(Py_None);
    return Py_None;
  }
  else {
    printf("set(): Unsupported IpmFexConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  }

}

#undef SetDictMember

