//
//  pds_EvrConfig class methods
//
static PyObject* pds_EvrConfig_get    (PyObject*   self, PyObject* args);
static PyObject* pds_EvrConfig_set    (PyObject*   self, PyObject* args);


static PyMethodDef pds_EvrConfig_methods[] = {
  {"get"   , (PyCFunction)pds_EvrConfig_get   , METH_NOARGS  , "Output the configuration"},
  {"set"   , (PyCFunction)pds_EvrConfig_set   , METH_VARARGS|METH_KEYWORDS, "Input the configuration"},
  {NULL},
};

DefineXtcType(EvrConfig) ;

//  Retrieve configuration data from a Python Dictionary
#define SetDictMemberU(name,configData)                 \
  { PyObject* data = PyDict_GetItemString(o,name);      \
    if (data)  configData = PyLong_AsUnsignedLong(data);  }
#define SetDictMemberF(name,configData)                 \
  { PyObject* data = PyDict_GetItemString(o,name);      \
    if (data)  configData = PyFloat_AsDouble(data);  }

#include "pdsdata/psddl/evr.ddl.h"

#include "pdsapp/config/EventcodeTiming.cc"

#include <vector>

static const double EvrPeriod = 1./119e6;

static PyObject* get_EventCodeV5(const Pds::EvrData::EventCodeV5& eventcode)
{
  PyObject* ec = PyDict_New();
  PyDict_SetItemString(ec, "code", PyLong_FromUnsignedLong(eventcode.code()));
  PyDict_SetItemString(ec, "desc", PyString_FromString(eventcode.desc()));

  if (eventcode.isReadout())
    PyDict_SetItemString(ec, "type", PyString_FromString("Readout"));
  else if (eventcode.isCommand())
    PyDict_SetItemString(ec, "type", PyString_FromString("Command"));
  else if (eventcode.isLatch())
   PyDict_SetItemString(ec, "type", PyString_FromString("Latch"));
  else
    PyDict_SetItemString(ec, "type", PyString_FromString("Control"));

  PyDict_SetItemString(ec, "reportDelay", PyLong_FromUnsignedLong(eventcode.reportDelay()));
  PyDict_SetItemString(ec, "reportWidth", PyLong_FromUnsignedLong(eventcode.reportWidth()));
  PyDict_SetItemString(ec, "releaseCode", PyLong_FromUnsignedLong(eventcode.reportWidth()));
  
  PyDict_SetItemString(ec, "maskTrigger", PyLong_FromUnsignedLong(eventcode.maskTrigger()));
  PyDict_SetItemString(ec, "maskSet", PyLong_FromUnsignedLong(eventcode.maskSet()));
  PyDict_SetItemString(ec, "maskClear", PyLong_FromUnsignedLong(eventcode.maskClear()));

  return ec;
}

static bool set_EventCodeV5(Pds::EvrData::EventCodeV5& eventcode, PyObject* o)
{
  const char* type = 0;
  { PyObject* data = PyDict_GetItemString(o,"type");
    if (data)  type = PyString_AsString(data);  }
    
  uint16_t code=0;         SetDictMemberU("code",code);
  uint32_t reportDelay=0;  SetDictMemberU("reportDelay",reportDelay);
  uint32_t reportWidth=1;  SetDictMemberU("reportWidth",reportWidth);
  uint32_t releaseCode=0;  SetDictMemberU("releaseCode",releaseCode);
  uint32_t maskTrigger=0;  SetDictMemberU("maskTrigger",maskTrigger);
  uint32_t maskSet=0;      SetDictMemberU("maskSet",maskSet);
  uint32_t maskClear=0;    SetDictMemberU("maskClear",maskClear);
 
  if (strcasecmp(type,"Readout")==0) {
    new (&eventcode) 
      Pds::EvrData::EventCodeV5(code, true, false, false, 0, 1,
                                maskTrigger,maskSet,maskClear,
                                PyString_AsString(PyDict_GetItemString(o,"desc")));
  }
  else if (strcasecmp(type,"Command")==0) {
    new (&eventcode) 
      Pds::EvrData::EventCodeV5(code, false, true, false, 0, 1,
				0, 0, 0,
                                PyString_AsString(PyDict_GetItemString(o,"desc")));
  }
  else if (strcasecmp(type,"Latch")==0) {
    new (&eventcode) 
      Pds::EvrData::EventCodeV5(code, false, false, true, reportDelay, releaseCode,
                                0, 0, 0,
                                PyString_AsString(PyDict_GetItemString(o,"desc")));
  }
  else if (strcasecmp(type,"Control")==0) {
    new (&eventcode) 
      Pds::EvrData::EventCodeV5(code, false, false, false, reportDelay, reportWidth,
				0, 0, 0,
                                PyString_AsString(PyDict_GetItemString(o,"desc")));
  }
  else {
    char buff[128];
    sprintf(buff,"Unknown eventcode type %s {Readout,Command,Control,Latch}",type);
    PyErr_SetString(PyExc_RuntimeError,buff);
    return false;
  }
  return true;
}

static PyObject* get_EventCodeV6(const Pds::EvrData::EventCodeV6& eventcode)
{
  PyObject* ec = PyDict_New();
  PyDict_SetItemString(ec, "code", PyLong_FromUnsignedLong(eventcode.code()));
  PyDict_SetItemString(ec, "desc", PyString_FromString(eventcode.desc()));

  if (eventcode.isReadout())
    PyDict_SetItemString(ec, "type", PyString_FromString("Readout"));
  else if (eventcode.isCommand())
    PyDict_SetItemString(ec, "type", PyString_FromString("Command"));
  else if (eventcode.isLatch())
   PyDict_SetItemString(ec, "type", PyString_FromString("Latch"));
  else
    PyDict_SetItemString(ec, "type", PyString_FromString("Control"));

  PyDict_SetItemString(ec, "reportDelay", PyLong_FromUnsignedLong(eventcode.reportDelay()));
  PyDict_SetItemString(ec, "reportWidth", PyLong_FromUnsignedLong(eventcode.reportWidth()));
  PyDict_SetItemString(ec, "releaseCode", PyLong_FromUnsignedLong(eventcode.reportWidth()));

  PyDict_SetItemString(ec, "maskTrigger", PyLong_FromUnsignedLong(eventcode.maskTrigger()));
  PyDict_SetItemString(ec, "maskSet", PyLong_FromUnsignedLong(eventcode.maskSet()));
  PyDict_SetItemString(ec, "maskClear", PyLong_FromUnsignedLong(eventcode.maskClear()));
  
  PyDict_SetItemString(ec, "readoutGroup", PyLong_FromUnsignedLong(eventcode.readoutGroup()));

  return ec;
}

static bool set_EventCodeV6(Pds::EvrData::EventCodeV6& eventcode, PyObject* o)
{
  const char* type = 0;
  { PyObject* data = PyDict_GetItemString(o,"type");
    if (data)  type = PyString_AsString(data);  }

  uint16_t code=0;  SetDictMemberU("code",code);
  uint32_t reportDelay=0;  SetDictMemberU("reportDelay",reportDelay);
  uint32_t reportWidth=1;  SetDictMemberU("reportWidth",reportWidth);
  uint32_t releaseCode=0;  SetDictMemberU("releaseCode",releaseCode);
  uint32_t maskTrigger=0;  SetDictMemberU("maskTrigger",maskTrigger);
  uint32_t maskSet=0;      SetDictMemberU("maskSet",maskSet);
  uint32_t maskClear=0;    SetDictMemberU("maskClear",maskClear);
  uint16_t readoutGroup=1; SetDictMemberU("readoutGroup",readoutGroup);
 
  if (strcasecmp(type,"Readout")==0) {
    new (&eventcode) 
      Pds::EvrData::EventCodeV6(code, true, false, false, 0, 1,
                                maskTrigger,maskSet,maskClear,
                                PyString_AsString(PyDict_GetItemString(o,"desc")),
                                readoutGroup);
  }
  else if (strcasecmp(type,"Command")==0) {
    new (&eventcode) 
      Pds::EvrData::EventCodeV6(code, false, true, false, 0, 1,
				0, 0, 0,
                                PyString_AsString(PyDict_GetItemString(o,"desc")),
                                0);
  }
  else if (strcasecmp(type,"Latch")==0) {
    new (&eventcode) 
      Pds::EvrData::EventCodeV6(code, false, false, true, reportDelay, releaseCode,
				0,0,0,
                                PyString_AsString(PyDict_GetItemString(o,"desc")),
				0);
  }
  else if (strcasecmp(type,"Control")==0) {
    new (&eventcode) 
      Pds::EvrData::EventCodeV6(code, false, false, false, reportDelay, reportWidth,
				0,0,0,
                                PyString_AsString(PyDict_GetItemString(o,"desc")),
				0);
  }
  else {
    char buff[128];
    sprintf(buff,"Unknown eventcode type %s {Readout,Command,Control,Latch}",type);
    PyErr_SetString(PyExc_RuntimeError,buff);
    return false;
  }
  return true;
}

//
//  Compensate for eventcode timing with respect to eventcode 140
//
static PyObject* get_PulseConfigV3(const Pds::EvrData::PulseConfigV3& pulse, unsigned code=140)
{
  int offset = Pds_ConfigDb::EventcodeTiming::timeslot(code) -
               Pds_ConfigDb::EventcodeTiming::timeslot(140);

  PyObject* p = PyDict_New();
  PyDict_SetItemString(p, "pulse"   , PyLong_FromUnsignedLong(unsigned(pulse.pulseId())));
  PyDict_SetItemString(p, "polarity", PyString_FromString(pulse.polarity() ? "Neg":"Pos"));
  PyDict_SetItemString(p, "delay"   , PyFloat_FromDouble(double((pulse.delay()+offset)*EvrPeriod)));
  PyDict_SetItemString(p, "width"   , PyFloat_FromDouble(double(pulse.width()*EvrPeriod)));
  return p;
}

static bool set_PulseConfigV3(Pds::EvrData::PulseConfigV3& pulse, PyObject* o, unsigned code=140)
{
  int offset = Pds_ConfigDb::EventcodeTiming::timeslot(code) -
               Pds_ConfigDb::EventcodeTiming::timeslot(140);

  const char* pol = 0;
  { PyObject* data = PyDict_GetItemString(o,"polarity");
    if (data)  pol = PyString_AsString(data);  }
  
  uint16_t pulseId=0xffff; SetDictMemberU("pulse",pulseId);
  if (pulseId==0xffff) {
    PyErr_SetString(PyExc_RuntimeError,"No \'pulse\' member found.");
    return false;
  }

  double d=-1,w=-1;
  SetDictMemberF("delay",d);
  SetDictMemberF("width",w);
  if (d==-1) {
    PyErr_SetString(PyExc_RuntimeError,"No \'delay\' member found.");
    return false;
  }
  if (w==-1) {
    PyErr_SetString(PyExc_RuntimeError,"No \'width\' member found.");
    return false;
  }
  uint32_t delay   = unsigned(d/EvrPeriod + 0.5);
  uint32_t width   = unsigned(w/EvrPeriod + 0.5);  

  if (int(delay) < offset ) {
    char buff[128];
    sprintf(buff,"Pulse %d delay too small {<%f}",pulseId,double(offset*EvrPeriod));
    PyErr_SetString(PyExc_RuntimeError,buff);
    return false;
  }
  else
   delay -= offset;  

  uint16_t polarity;
  if (strncasecmp(pol,"Pos",3)==0)
    polarity = 0;
  else if (strncasecmp(pol,"Neg",3)==0)
    polarity = 1;
  else {
    char buff[128];
    sprintf(buff,"Unknown polarity %s {Pos,Neg}",pol);
    PyErr_SetString(PyExc_RuntimeError,buff);
    return false;
  }

  new (&pulse)Pds::EvrData::PulseConfigV3(pulseId, polarity, 1, delay, width);
  return true;
}

static PyObject* get_OutputMap(const Pds::EvrData::OutputMap& output,
                               unsigned opm) // outputs per module
{
  PyObject* p = PyDict_New();
  PyDict_SetItemString(p, "pulse"   , PyLong_FromUnsignedLong(output.source_id()));
  PyDict_SetItemString(p, "module"  , PyLong_FromUnsignedLong(output.conn_id()/opm));
  PyDict_SetItemString(p, "conn"    , PyLong_FromUnsignedLong(output.conn_id()%opm));
  return p;
}

static bool set_OutputMap(Pds::EvrData::OutputMap& output, PyObject* o, unsigned opm)
{
  unsigned source_id=0;  SetDictMemberU("pulse",  source_id);
  unsigned module   =0;  SetDictMemberU("module", module);
  unsigned conn     =0;  SetDictMemberU("conn",   conn);

  if (conn > opm) {
    char buff[128];
    sprintf(buff,"Conn %d > Max outputs per module (%d)",conn,opm);
    PyErr_SetString(PyExc_RuntimeError,buff);
    return false;
  }

  typedef Pds::EvrData::OutputMap OType;
  new (&output)OType(OType::Pulse, source_id, OType::UnivIO, module*opm+conn);
  return true;
}

static PyObject* get_OutputMapV2(const Pds::EvrData::OutputMapV2& output)
{
  PyObject* p = PyDict_New();
  PyDict_SetItemString(p, "pulse"   , PyLong_FromUnsignedLong(output.source_id()));
  PyDict_SetItemString(p, "module"  , PyLong_FromUnsignedLong(output.module()));
  PyDict_SetItemString(p, "conn"    , PyLong_FromUnsignedLong(output.conn_id()));
  return p;
}

static bool set_OutputMapV2(Pds::EvrData::OutputMapV2& output, PyObject* o)
{
  unsigned source_id=0;  SetDictMemberU("pulse",  source_id);
  unsigned module   =0;  SetDictMemberU("module", module);
  unsigned conn     =0;  SetDictMemberU("conn",   conn);

  typedef Pds::EvrData::OutputMapV2 OType;
  new (&output)OType(OType::Pulse, source_id, OType::UnivIO, conn, module);
  return true;
}

PyObject* pds_EvrConfig_get (PyObject*   self, PyObject* args) 
{
  pdsxtc* xtc = (pdsxtc*)self;
  PyObject* o = PyDict_New();  

  if (xtc->contains.version()==5) {
    const Pds::EvrData::ConfigV5* v = 
      reinterpret_cast<const Pds::EvrData::ConfigV5*>(xtc->payload);

    { unsigned neventcodes = v->neventcodes();
      PyObject* eventcodes = PyList_New(neventcodes);
      for(unsigned j=0; j<neventcodes; j++)
  PyList_SetItem(eventcodes, j, get_EventCodeV5(v->eventcodes()[j]));
      PyDict_SetItemString(o, "eventcodes", eventcodes);
    }
    { unsigned npulses = v->npulses();
      PyObject* pulses = PyList_New(npulses);
      for(unsigned j=0; j<npulses; j++)
        PyList_SetItem(pulses, j, get_PulseConfigV3(v->pulses()[j]));
      PyDict_SetItemString(o, "pulses", pulses);
    }
    { unsigned noutputs = v->noutputs();
      PyObject* outputs = PyList_New(noutputs);
      for(unsigned j=0; j<noutputs; j++)
        PyList_SetItem(outputs, j, get_OutputMap(v->output_maps()[j],Pds::EvrData::ConfigV5::EvrOutputs));
      PyDict_SetItemString(o, "outputs", outputs);
    }
    return o;
  }
  else if (xtc->contains.version()==6) {
    const Pds::EvrData::ConfigV6* v = 
      reinterpret_cast<const Pds::EvrData::ConfigV6*>(xtc->payload);

    { unsigned neventcodes = v->neventcodes();
      PyObject* eventcodes = PyList_New(neventcodes);
      for(unsigned j=0; j<neventcodes; j++)
      PyList_SetItem(eventcodes, j, get_EventCodeV5(v->eventcodes()[j]));
      PyDict_SetItemString(o, "eventcodes", eventcodes);
    }
    { unsigned npulses = v->npulses();
      PyObject* pulses = PyList_New(npulses);
      for(unsigned j=0; j<npulses; j++)
        PyList_SetItem(pulses, j, get_PulseConfigV3(v->pulses()[j]));
      PyDict_SetItemString(o, "pulses", pulses);
    }
    { unsigned noutputs = v->noutputs();
      PyObject* outputs = PyList_New(noutputs);
      for(unsigned j=0; j<noutputs; j++)
        PyList_SetItem(outputs, j, get_OutputMapV2(v->output_maps()[j]));
      PyDict_SetItemString(o, "outputs", outputs);
    }
    return o;
  }
  else if (xtc->contains.version()==7) {
    const Pds::EvrData::ConfigV7* v = 
      reinterpret_cast<const Pds::EvrData::ConfigV7*>(xtc->payload);

    { unsigned neventcodes = v->neventcodes();
      PyObject* eventcodes = PyList_New(neventcodes);
      for(unsigned j=0; j<neventcodes; j++)
      PyList_SetItem(eventcodes, j, get_EventCodeV6(v->eventcodes()[j]));
      PyDict_SetItemString(o, "eventcodes", eventcodes);
    }
    { unsigned npulses = v->npulses();

      std::vector<unsigned> pulseToCode(npulses);
      for(unsigned j=0; j<v->neventcodes(); j++) {
        unsigned maskTrigger = v->eventcodes()[j].maskTrigger();
        for(unsigned i=0; maskTrigger!=0; i++) {
          if (maskTrigger & 1)
            pulseToCode[i] = v->eventcodes()[j].code();
	  maskTrigger >>= 1;
        }
      }

      PyObject* pulses = PyList_New(npulses);
      for(unsigned j=0; j<npulses; j++)
        PyList_SetItem(pulses, j, get_PulseConfigV3(v->pulses()[j],pulseToCode[j]));
      PyDict_SetItemString(o, "pulses", pulses);
    }
    { unsigned noutputs = v->noutputs();
      PyObject* outputs = PyList_New(noutputs);
      for(unsigned j=0; j<noutputs; j++)
        PyList_SetItem(outputs, j, get_OutputMapV2(v->output_maps()[j]));
      PyDict_SetItemString(o, "outputs", outputs);
    }
    return o;
  }
  else {
    Py_DECREF(o);
    printf("get(): Unsupported EvrConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  }

}


PyObject* pds_EvrConfig_set    (PyObject*   self, PyObject* args)
{
  PyObject* o;
  if (PyArg_ParseTuple(args,"O",&o)==0)
    return NULL;

  pdsxtc* xtc = (pdsxtc*)self;

  if (xtc->contains.version()==5) {

    Pds::EvrData::EventCodeV5*   p_eventcodes = 0;
    Pds::EvrData::PulseConfigV3* p_pulses     = 0;
    Pds::EvrData::OutputMap*     p_outputs    = 0;

    unsigned neventcodes = 0;
    unsigned npulses = 0;
    unsigned noutputs = 0;

    PyObject* eventcodes = PyDict_GetItemString(o,"eventcodes");
    if (eventcodes) {
      neventcodes = PyList_Size(eventcodes);
      p_eventcodes = new Pds::EvrData::EventCodeV5[neventcodes];
      for(unsigned j=0; j<neventcodes; j++)
        if (!set_EventCodeV5(p_eventcodes[j],PyList_GetItem(eventcodes,j)))
          return NULL;
    }
    else {
      PyErr_SetString(PyExc_RuntimeError,"No eventcodes defined");
      return NULL;
    }

    PyObject* pulses = PyDict_GetItemString(o,"pulses");
    if (pulses) {
      npulses = PyList_Size(pulses);
      p_pulses = new Pds::EvrData::PulseConfigV3[npulses];
      for(unsigned j=0; j<npulses; j++)
        if (!set_PulseConfigV3(p_pulses[j],PyList_GetItem(pulses,j)))
          return NULL;
    }

    PyObject* outputs = PyDict_GetItemString(o,"outputs");
    if (outputs) {
      noutputs = PyList_Size(outputs);
      p_outputs = new Pds::EvrData::OutputMap[noutputs];
      for(unsigned j=0; j<noutputs; j++)
        if (!set_OutputMap(p_outputs[j],PyList_GetItem(outputs,j),Pds::EvrData::ConfigV5::EvrOutputs))
          return NULL;
    }

    Pds::EvrData::SequencerConfigV1 noSequencer(Pds::EvrData::SequencerConfigV1::Disable,
                                                Pds::EvrData::SequencerConfigV1::Disable,
                                                0, 0, 0);

    char* p = new char[neventcodes*sizeof(Pds::EvrData::EventCodeV5) +
                       npulses    *sizeof(Pds::EvrData::PulseConfigV3) +
                       noutputs   *sizeof(Pds::EvrData::OutputMap) +
                       sizeof(Pds::EvrData::ConfigV5) +
                       sizeof(Pds::EvrData::SequencerConfigV1)];

    new(p) Pds::EvrData::ConfigV5(neventcodes, 
                                  npulses, 
                                  noutputs,
                                  p_eventcodes,
                                  p_pulses,
                                  p_outputs,
				  noSequencer);
    

    delete[] xtc->payload;
    xtc->payload = p;

    Py_INCREF(Py_None);
    return Py_None;
  }
  else if (xtc->contains.version()==6) {

    Pds::EvrData::EventCodeV5*   p_eventcodes = 0;
    Pds::EvrData::PulseConfigV3* p_pulses     = 0;
    Pds::EvrData::OutputMapV2*   p_outputs    = 0;

    unsigned neventcodes = 0;
    unsigned npulses = 0;
    unsigned noutputs = 0;

    PyObject* eventcodes = PyDict_GetItemString(o,"eventcodes");
    if (eventcodes) {
      neventcodes = PyList_Size(eventcodes);
      p_eventcodes = new Pds::EvrData::EventCodeV5[neventcodes];
      for(unsigned j=0; j<neventcodes; j++)
        if (!set_EventCodeV5(p_eventcodes[j],PyList_GetItem(eventcodes,j)))
          return NULL;
    }
    else {
      PyErr_SetString(PyExc_RuntimeError,"No eventcodes defined");
      return NULL;
    }

    PyObject* pulses = PyDict_GetItemString(o,"pulses");
    if (pulses) {
      npulses = PyList_Size(pulses);
      p_pulses = new Pds::EvrData::PulseConfigV3[npulses];
      for(unsigned j=0; j<npulses; j++)
        if (!set_PulseConfigV3(p_pulses[j],PyList_GetItem(pulses,j)))
          return NULL;
    }

    PyObject* outputs = PyDict_GetItemString(o,"outputs");
    if (outputs) {
      noutputs = PyList_Size(outputs);
      p_outputs = new Pds::EvrData::OutputMapV2[noutputs];
      for(unsigned j=0; j<noutputs; j++)
        if (!set_OutputMapV2(p_outputs[j],PyList_GetItem(outputs,j)))
          return NULL;
    }

    Pds::EvrData::SequencerConfigV1 noSequencer(Pds::EvrData::SequencerConfigV1::Disable,
                                                Pds::EvrData::SequencerConfigV1::Disable,
                                                0, 0, 0);

    unsigned sz =      neventcodes*sizeof(Pds::EvrData::EventCodeV5) +
                       npulses    *sizeof(Pds::EvrData::PulseConfigV3) +
                       noutputs   *sizeof(Pds::EvrData::OutputMapV2) +
                       sizeof(Pds::EvrData::ConfigV6) +
                       sizeof(Pds::EvrData::SequencerConfigV1);

    char* p = new char[sz];
    new(p) Pds::EvrData::ConfigV6(neventcodes,
                                  npulses,    
                                  noutputs,   
                                  p_eventcodes,
                                  p_pulses,
                                  p_outputs,
                                  noSequencer);
    

    delete[] xtc->payload;

    xtc->extent  = sz;
    xtc->payload = p;

    Py_INCREF(Py_None);
    return Py_None;
  }
  else if (xtc->contains.version()==7) {

    Pds::EvrData::EventCodeV6*   p_eventcodes = 0;
    Pds::EvrData::PulseConfigV3* p_pulses     = 0;
    Pds::EvrData::OutputMapV2*   p_outputs    = 0;

    unsigned neventcodes = 0;
    unsigned npulses = 0;
    unsigned noutputs = 0;

    PyObject* eventcodes = PyDict_GetItemString(o,"eventcodes");
    if (eventcodes) {
      neventcodes = PyList_Size(eventcodes);
      p_eventcodes = new Pds::EvrData::EventCodeV6[neventcodes];
      for(unsigned j=0; j<neventcodes; j++)
        if (!set_EventCodeV6(p_eventcodes[j],PyList_GetItem(eventcodes,j)))
          return NULL;
    }
    else {
      PyErr_SetString(PyExc_RuntimeError,"No eventcodes defined");
      return NULL;
    }

    PyObject* pulses = PyDict_GetItemString(o,"pulses");
    if (pulses) {
      npulses = PyList_Size(pulses);

      std::vector<unsigned> pulseToCode(npulses);
      for(unsigned j=0; j<PyList_Size(eventcodes); j++) {
        unsigned maskTrigger = p_eventcodes[j].maskTrigger();
        for(unsigned i=0; maskTrigger!=0; i++) {
          if (maskTrigger & 1)
            pulseToCode[i] = p_eventcodes[j].code();
          maskTrigger >>= 1;
        }
      }

      p_pulses = new Pds::EvrData::PulseConfigV3[npulses];
      for(unsigned j=0; j<npulses; j++)
        if (!set_PulseConfigV3(p_pulses[j],PyList_GetItem(pulses,j),pulseToCode[j]))
          return NULL;
    }

    PyObject* outputs = PyDict_GetItemString(o,"outputs");
    if (outputs) {
      noutputs = PyList_Size(outputs);
      p_outputs = new Pds::EvrData::OutputMapV2[noutputs];
      for(unsigned j=0; j<noutputs; j++)
        if (!set_OutputMapV2(p_outputs[j],PyList_GetItem(outputs,j)))
          return NULL;
    }

    Pds::EvrData::SequencerConfigV1 noSequencer(Pds::EvrData::SequencerConfigV1::Disable,
                                                Pds::EvrData::SequencerConfigV1::Disable,
                                                0, 0, 0);

    unsigned sz =      neventcodes*sizeof(Pds::EvrData::EventCodeV6) +
                       npulses    *sizeof(Pds::EvrData::PulseConfigV3) +
                       noutputs   *sizeof(Pds::EvrData::OutputMapV2) +
                       sizeof(Pds::EvrData::ConfigV7) +
                       sizeof(Pds::EvrData::SequencerConfigV1);

    char* p = new char[sz];
    new(p) Pds::EvrData::ConfigV7(neventcodes,
                                  npulses,    
                                  noutputs,   
                                  p_eventcodes,
                                  p_pulses,
                                  p_outputs,
                                  noSequencer);
    

    delete[] xtc->payload;

    xtc->extent  = sz;
    xtc->payload = p;

    Py_INCREF(Py_None);
    return Py_None;
  }
  else {
    char buff[128];
    sprintf(buff,"Unsupported EvrConfig Version= %u \n",xtc->contains.version());
    PyErr_SetString(PyExc_RuntimeError,buff);
    return NULL; // Throw an exception
  }

}

#undef SetDictMemberU
#undef SetDictMemberF

