//
//  pds_IpimbConfig class methods
//
static PyObject* pds_PrincetonConfig_get    (PyObject*   self, PyObject* args);
static PyObject* pds_PrincetonConfig_set    (PyObject*   self, PyObject* args);

static PyMethodDef pds_PrincetonConfig_methods[] = {
  {"get"   , (PyCFunction)pds_PrincetonConfig_get   , METH_NOARGS  , "Output the configuration"},
  {"set"   , (PyCFunction)pds_PrincetonConfig_set   , METH_KEYWORDS, "Input the configuration"},
  {NULL},
};

DefineXtcType(PrincetonConfig) ;

#include "pdsdata/princeton/ConfigV1.hh"
#include "pdsdata/princeton/ConfigV2.hh"
#include "pdsdata/princeton/ConfigV3.hh"
#include "pdsdata/princeton/ConfigV4.hh"
#include "pdsdata/princeton/ConfigV5.hh"
#include <new>


//  Return a dictionary of configuration data
#define SetDictMember(name,isFloat)                                                       \
  { if (isFloat)                                                                            \
      PyDict_SetItemString(o,#name,PyFloat_FromDouble(cfg->name()));                      \
    else                                                                                    \
      PyDict_SetItemString(o,#name,PyLong_FromUnsignedLong((unsigned)cfg->name())); }

PyObject* pds_PrincetonConfig_get (PyObject*   self, PyObject* args)
{
  pdsxtc* xtc = (pdsxtc*)self;
  PyObject* o = PyDict_New();
  if (xtc->contains.version()==1) {
    const Pds::Princeton::ConfigV1* cfg =
      reinterpret_cast<const Pds::Princeton::ConfigV1*>(xtc->payload);

    SetDictMember(width,false);
    SetDictMember(height,false);
    SetDictMember(orgX,false);
    SetDictMember(orgY,false);
    SetDictMember(binX,false);
    SetDictMember(binY,false);
    SetDictMember(exposureTime,true);
    SetDictMember(coolingTemp,true);
    SetDictMember(readoutSpeedIndex,false);
    SetDictMember(readoutEventCode,false);
    SetDictMember(delayMode,false);

    return o;
  }
  else if (xtc->contains.version()==2) {
    const Pds::Princeton::ConfigV2* cfg =
      reinterpret_cast<const Pds::Princeton::ConfigV2*>(xtc->payload);

    SetDictMember(width,false);
    SetDictMember(height,false);
    SetDictMember(orgX,false);
    SetDictMember(orgY,false);
    SetDictMember(binX,false);
    SetDictMember(binY,false);
    SetDictMember(exposureTime,true);
    SetDictMember(coolingTemp,true);
    SetDictMember(gainIndex,false);
    SetDictMember(readoutSpeedIndex,false);
    SetDictMember(readoutEventCode,false);
    SetDictMember(delayMode,false);

    return o;
  }
  else if (xtc->contains.version()==3) {
    const Pds::Princeton::ConfigV3* cfg =
      reinterpret_cast<const Pds::Princeton::ConfigV3*>(xtc->payload);

    SetDictMember(width,false);
    SetDictMember(height,false);
    SetDictMember(orgX,false);
    SetDictMember(orgY,false);
    SetDictMember(binX,false);
    SetDictMember(binY,false);
    SetDictMember(exposureTime,true);
    SetDictMember(coolingTemp,true);
    SetDictMember(gainIndex,false);
    SetDictMember(readoutSpeedIndex,false);
    SetDictMember(exposureEventCode,false);
    SetDictMember(numDelayShots,false);

    return o;
  }
  else if (xtc->contains.version()==4) {
    const Pds::Princeton::ConfigV4* cfg =
      reinterpret_cast<const Pds::Princeton::ConfigV4*>(xtc->payload);

    SetDictMember(width,false);
    SetDictMember(height,false);
    SetDictMember(orgX,false);
    SetDictMember(orgY,false);
    SetDictMember(binX,false);
    SetDictMember(binY,false);
    SetDictMember(maskedHeight,false);
    SetDictMember(kineticHeight,false);
    SetDictMember(vsSpeed,true);
    SetDictMember(exposureTime,true);
    SetDictMember(coolingTemp,true);
    SetDictMember(gainIndex,false);
    SetDictMember(readoutSpeedIndex,false);
    SetDictMember(exposureEventCode,false);
    SetDictMember(numDelayShots,false);

    return o;
  }
  else if (xtc->contains.version()==5) {
    const Pds::Princeton::ConfigV5* cfg =
      reinterpret_cast<const Pds::Princeton::ConfigV5*>(xtc->payload);

    SetDictMember(width,false);
    SetDictMember(height,false);
    SetDictMember(orgX,false);
    SetDictMember(orgY,false);
    SetDictMember(binX,false);
    SetDictMember(binY,false);
    SetDictMember(exposureTime,true);
    SetDictMember(coolingTemp,true);
    SetDictMember(gainIndex,false);
    SetDictMember(readoutSpeedIndex,false);
    SetDictMember(maskedHeight,false);
    SetDictMember(kineticHeight,false);
    SetDictMember(vsSpeed,true);
    SetDictMember(infoReportInterval,false);
    SetDictMember(exposureEventCode,false);
    SetDictMember(numDelayShots,false);

    return o;
  }
  else {
    Py_DECREF(o);
    printf("get(): Unsupported PrincetonConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  }


}
#undef SetDictMember


//  Retrieve configuration data from a Python Dictionary
#define SetDictMember(name)                                          \
  double name;                                                       \
  { PyObject* i = PyDict_GetItemString(o,#name);                     \
    if (i) {                                                         \
      if(PyFloat_Check(i))  name = PyFloat_AsDouble(i);              \
      else if (PyInt_CheckExact(i)) name = (double) PyInt_AsLong(i); \
      else  name = (double) PyLong_AsUnsignedLong(i);                \
    }                                                                \
    else { \
  printf("Unknown %s\n",#name); \
  name = (double) cfg->name();  } }


PyObject* pds_PrincetonConfig_set    (PyObject*   self, PyObject* args)
{
  PyObject* o = 0;
  if (PyArg_ParseTuple(args,"O",&o)==0)
    return NULL;

  pdsxtc* xtc = (pdsxtc*)self;
  if (xtc->contains.version()==1) {
    const Pds::Princeton::ConfigV1* cfg =
      reinterpret_cast<const Pds::Princeton::ConfigV1*>(xtc->payload);

    SetDictMember(width);
    SetDictMember(height);
    SetDictMember(orgX);
    SetDictMember(orgY);
    SetDictMember(binX);
    SetDictMember(binY);
    SetDictMember(exposureTime);
    SetDictMember(coolingTemp);
    SetDictMember(readoutSpeedIndex);
    SetDictMember(readoutEventCode);
    SetDictMember(delayMode);
    new(xtc->payload) Pds::Princeton::ConfigV1((uint32_t) width,
                      (uint32_t) height,
                      (uint32_t) orgX,
                      (uint32_t) orgY,
                      (uint32_t) binX,
                      (uint32_t) binY,
                      (float) exposureTime,
                      (float) coolingTemp,
                      (uint32_t) readoutSpeedIndex,
                      (uint16_t) readoutEventCode,
                      (uint16_t) delayMode);
    Py_INCREF(Py_None);
    return Py_None;
  }
  else if (xtc->contains.version()==2) {
    const Pds::Princeton::ConfigV2* cfg =
      reinterpret_cast<const Pds::Princeton::ConfigV2*>(xtc->payload);

    SetDictMember(width);
    SetDictMember(height);
    SetDictMember(orgX);
    SetDictMember(orgY);
    SetDictMember(binX);
    SetDictMember(binY);
    SetDictMember(exposureTime);
    SetDictMember(coolingTemp);
    SetDictMember(gainIndex);
    SetDictMember(readoutSpeedIndex);
    SetDictMember(readoutEventCode);
    SetDictMember(delayMode);
    new(xtc->payload) Pds::Princeton::ConfigV2((uint32_t) width,
                      (uint32_t) height,
                      (uint32_t) orgX,
                      (uint32_t) orgY,
                      (uint32_t) binX,
                      (uint32_t) binY,
                      (float) exposureTime,
                      (float) coolingTemp,
                      (uint16_t) gainIndex,
                      (uint16_t) readoutSpeedIndex,
                      (uint16_t) readoutEventCode,
                      (uint16_t) delayMode);
    Py_INCREF(Py_None);
    return Py_None;
  }
  else if (xtc->contains.version()==3) {
    const Pds::Princeton::ConfigV3* cfg =
      reinterpret_cast<const Pds::Princeton::ConfigV3*>(xtc->payload);

    SetDictMember(width);
    SetDictMember(height);
    SetDictMember(orgX);
    SetDictMember(orgY);
    SetDictMember(binX);
    SetDictMember(binY);
    SetDictMember(exposureTime);
    SetDictMember(coolingTemp);
    SetDictMember(gainIndex);
    SetDictMember(readoutSpeedIndex);
    SetDictMember(exposureEventCode);
    SetDictMember(numDelayShots);
    new(xtc->payload) Pds::Princeton::ConfigV3((uint32_t) width,
                      (uint32_t) height,
                      (uint32_t) orgX,
                      (uint32_t) orgY,
                      (uint32_t) binX,
                      (uint32_t) binY,
                      (float) exposureTime,
                      (float) coolingTemp,
                      (uint8_t) gainIndex,
                      (uint8_t) readoutSpeedIndex,
                      (uint16_t) exposureEventCode,
                      (uint16_t) numDelayShots);
    Py_INCREF(Py_None);
    return Py_None;
  }
  else if (xtc->contains.version()==4) {
    const Pds::Princeton::ConfigV4* cfg =
      reinterpret_cast<const Pds::Princeton::ConfigV4*>(xtc->payload);

    SetDictMember(width);
    SetDictMember(height);
    SetDictMember(orgX);
    SetDictMember(orgY);
    SetDictMember(binX);
    SetDictMember(binY);
    SetDictMember(maskedHeight);
    SetDictMember(kineticHeight);
    SetDictMember(vsSpeed);
    SetDictMember(exposureTime);
    SetDictMember(coolingTemp);
    SetDictMember(gainIndex);
    SetDictMember(readoutSpeedIndex);
    SetDictMember(exposureEventCode);
    SetDictMember(numDelayShots);
    new(xtc->payload) Pds::Princeton::ConfigV4((uint32_t) width,
                      (uint32_t) height,
                      (uint32_t) orgX,
                      (uint32_t) orgY,
                      (uint32_t) binX,
                      (uint32_t) binY,
                      (uint32_t) maskedHeight,
                      (uint32_t) kineticHeight,
                      (float) vsSpeed,
                      (float) exposureTime,
                      (float) coolingTemp,
                      (uint8_t) gainIndex,
                      (uint8_t) readoutSpeedIndex,
                      (uint16_t) exposureEventCode,
                      (uint16_t) numDelayShots);
    Py_INCREF(Py_None);
    return Py_None;
  }
  else if (xtc->contains.version()==5) {
    const Pds::Princeton::ConfigV5* cfg =
      reinterpret_cast<const Pds::Princeton::ConfigV5*>(xtc->payload);

    SetDictMember(width);
    SetDictMember(height);
    SetDictMember(orgX);
    SetDictMember(orgY);
    SetDictMember(binX);
    SetDictMember(binY);
    SetDictMember(exposureTime);
    SetDictMember(coolingTemp);
    SetDictMember(gainIndex);
    SetDictMember(readoutSpeedIndex);
    SetDictMember(maskedHeight);
    SetDictMember(kineticHeight);
    SetDictMember(vsSpeed);
    SetDictMember(infoReportInterval);
    SetDictMember(exposureEventCode);
    SetDictMember(numDelayShots);
    new(xtc->payload) Pds::Princeton::ConfigV5((uint32_t) width,
                      (uint32_t) height,
                      (uint32_t) orgX,
                      (uint32_t) orgY,
                      (uint32_t) binX,
                      (uint32_t) binY,
                      (float) exposureTime,
                      (float) coolingTemp,
                      (uint16_t) gainIndex,
                      (uint16_t) readoutSpeedIndex,
                      (uint32_t) maskedHeight,
                      (uint32_t) kineticHeight,
                      (float) vsSpeed,
                      (int16_t) infoReportInterval,
                      (uint16_t) exposureEventCode,
                      (uint16_t) numDelayShots);
    Py_INCREF(Py_None);
    return Py_None;
  }
  else {
    printf("set(): Unsupported PrincetonConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  }

}

#undef SetDictMember

