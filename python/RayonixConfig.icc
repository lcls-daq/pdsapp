//
//  pds_RayonixConfig class methods
//
static PyObject* pds_RayonixConfig_get    (PyObject*   self, PyObject* args);
static PyObject* pds_RayonixConfig_set    (PyObject*   self, PyObject* args);

static PyMethodDef pds_RayonixConfig_methods[] = {
  {"get"   , (PyCFunction)pds_RayonixConfig_get   , METH_NOARGS  , "Output the configuration"},
  {"set"   , (PyCFunction)pds_RayonixConfig_set   , METH_KEYWORDS, "Input the configuration"},
  {NULL},
};

DefineXtcType(RayonixConfig) ;

#include "pdsdata/psddl/rayonix.ddl.h"
#include <new>


//  Return a dictionary of configuration data
#define SetDictMember(name)                                       \
  { PyObject* v = PyLong_FromUnsignedLong((unsigned)cfg->name()); \
    if (v) {                                                      \
      PyDict_SetItemString(o,#name,v);                            \
      Py_DECREF(v);                                               \
    }                                                             \
  }

PyObject* pds_RayonixConfig_get (PyObject*   self, PyObject* args) 
{
  pdsxtc* xtc = (pdsxtc*)self;
  PyObject* o = PyDict_New();  
  if (xtc->contains.version()==2) { 
    const Pds::Rayonix::ConfigV2* cfg = 
      reinterpret_cast<const Pds::Rayonix::ConfigV2*>(xtc->payload);

    SetDictMember(binning_f);
    SetDictMember(binning_s);
    SetDictMember(testPattern);
    SetDictMember(trigger);
    SetDictMember(rawMode);
    SetDictMember(darkFlag);
    SetDictMember(readoutMode);
    { PyObject* v = PyString_FromString(cfg->deviceID());
      if (v) {
        PyDict_SetItemString(o,"deviceID",v);
        Py_DECREF(v);
      }
    }

    return o;
  }
  else {
    Py_DECREF(o);
    printf("get(): Unsupported RayonixConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  }


}
#undef SetDictMember


//  Retrieve configuration data from a Python Dictionary
#define SetDictMember(name)                                          \
  long name;                                                         \
  { PyObject* i = PyDict_GetItemString(o,#name);                     \
    if (i) {                                                         \
      if (PyInt_CheckExact(i)) name = PyInt_AsLong(i);               \
      else  name = PyLong_AsUnsignedLong(i);                         \
    }                                                                \
    else {                                                           \
      printf("Unknown %s\n",#name);                                  \
      name = cfg->name();                                            \
    }                                                                \
  }              


PyObject* pds_RayonixConfig_set    (PyObject*   self, PyObject* args)
{
  PyObject* o = 0;
  if (PyArg_ParseTuple(args,"O",&o)==0)
    return NULL;

  pdsxtc* xtc = (pdsxtc*)self;
  if (xtc->contains.version()==2) { 
    const Pds::Rayonix::ConfigV2* cfg = 
      reinterpret_cast<const Pds::Rayonix::ConfigV2*>(xtc->payload);

    SetDictMember(binning_f);
    SetDictMember(binning_s);
    SetDictMember(testPattern);
    SetDictMember(trigger);
    SetDictMember(rawMode);
    SetDictMember(darkFlag);
    SetDictMember(readoutMode);
    if ((binning_f != 2) && (binning_f != 3) && (binning_f != 4) &&
        (binning_f != 5) && (binning_f != 6) && (binning_f != 8) && (binning_f != 10)) {
      printf("Warning: binning_f changed from invalid value %ld to valid value 2\n", binning_f);
      printf("Notice:  valid binning values: 2, 3, 4, 5, 6, 8, 10\n");
      binning_f = 2;
    }
    if (binning_s != binning_f) {
      printf("Warning: binning_s changed from value %ld to binning_f value %ld\n", binning_s, binning_f);
      binning_s = binning_f;
    }
    new(xtc->payload) Pds::Rayonix::ConfigV2(
                      (uint8_t) binning_f,
                      (uint8_t) binning_s,
                      (int16_t) testPattern,
                      (uint32_t) 0,           // exposure not used
                      (uint32_t) trigger,
                      (uint16_t) rawMode,
                      (uint16_t) darkFlag,
                      (Pds::Rayonix::ConfigV2::ReadoutMode) readoutMode,
                      "name:0000");           // deviceID read from device
    Py_INCREF(Py_None);
    return Py_None;
  }
  else {
    printf("set(): Unsupported RayonixConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  }

}

#undef SetDictMember

