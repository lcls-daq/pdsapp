//
//  pds_iStarConfig class methods
//
static PyObject* pds_iStarConfig_get    (PyObject*   self, PyObject* args);
static PyObject* pds_iStarConfig_set    (PyObject*   self, PyObject* args);
static PyObject* pds_iStarConfig_enum   (PyObject*   self, PyObject* args);
static unsigned  pds_iStarConfig_size   (PyObject*   self);

static PyMethodDef pds_iStarConfig_methods[] = {
  {"get"        , (PyCFunction)pds_iStarConfig_get   , METH_VARARGS|METH_KEYWORDS, "Output the configuration"},
  {"set"        , (PyCFunction)pds_iStarConfig_set   , METH_VARARGS|METH_KEYWORDS, "Set the configuration"},
  {"get_enums"  , (PyCFunction)pds_iStarConfig_enum  , METH_NOARGS  , "Output enum constants"},
  {NULL},
};

DefineXtcType(iStarConfig) ;

#include "pdsdata/psddl/zyla.ddl.h"
#include <new>


// Return a dictionary of enum types in config
#define SetEnum(name,type,dict)                           \
  { PyObject* v = PyInt_FromLong(Pds::iStar::type::name);  \
    if (v) {                                              \
      PyDict_SetItemString(dict,#name,v);                 \
      Py_DECREF(v);                                       \
    }                                                     \
  }

#define SetEnumDict(name,dict)              \
  { PyDict_SetItemString(o,#name,dict);     \
    Py_DECREF(dict); }

static PyObject* get_istar_atbool_enum(pdsxtc* xtc)
{
  PyObject* atbool_enum = PyDict_New();
  if (xtc->contains.version()==1) {
    SetEnum(False,ConfigV1,atbool_enum);
    SetEnum(True,ConfigV1,atbool_enum);

    return atbool_enum;
  } else {
    Py_DECREF(atbool_enum);
    printf("get_enums(): Unsupported iStarConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  }
}

static PyObject* get_istar_fan_enum(pdsxtc* xtc)
{
  PyObject* fan_enum = PyDict_New();
  if (xtc->contains.version()==1) {
    SetEnum(Off,ConfigV1,fan_enum);
    SetEnum(On,ConfigV1,fan_enum);

    return fan_enum;
  } else {
    Py_DECREF(fan_enum);
    printf("get_enums(): Unsupported iStarConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  }
}

static PyObject* get_istar_readout_enum(pdsxtc* xtc)
{
  PyObject* readout_enum = PyDict_New();
  if (xtc->contains.version()==1) {
    SetEnum(Rate280MHz,ConfigV1,readout_enum);
    SetEnum(Rate100MHz,ConfigV1,readout_enum);
  
    return readout_enum;
  } else {
    Py_DECREF(readout_enum);
    printf("get_enums(): Unsupported iStarConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  } 
}

static PyObject* get_istar_trigger_enum(pdsxtc* xtc)
{   
  PyObject* trigger_enum = PyDict_New();
  if (xtc->contains.version()==1) {
    SetEnum(Internal,ConfigV1,trigger_enum);
    SetEnum(ExternalLevelTransition,ConfigV1,trigger_enum);
    SetEnum(ExternalStart,ConfigV1,trigger_enum);
    SetEnum(ExternalExposure,ConfigV1,trigger_enum);
    SetEnum(Software,ConfigV1,trigger_enum);
    SetEnum(Advanced,ConfigV1,trigger_enum);
    SetEnum(External,ConfigV1,trigger_enum);

    return trigger_enum;
  } else {
    Py_DECREF(trigger_enum);
    printf("get_enums(): Unsupported iStarConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  } 
}

static PyObject* get_istar_gain_enum(pdsxtc* xtc)
{   
  PyObject* gain_enum = PyDict_New();
  if (xtc->contains.version()==1) {
    SetEnum(HighWellCap12Bit,ConfigV1,gain_enum);
    SetEnum(LowNoise12Bit,ConfigV1,gain_enum);
    SetEnum(LowNoiseHighWellCap16Bit,ConfigV1,gain_enum);

    return gain_enum;
  } else {
    Py_DECREF(gain_enum);
    printf("get_enums(): Unsupported iStarConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  }
}

static PyObject* get_istar_gate_enum(pdsxtc* xtc)
{
  PyObject* gate_enum = PyDict_New();
  if (xtc->contains.version()==1) {
    SetEnum(CWOn,ConfigV1,gate_enum);
    SetEnum(CWOff,ConfigV1,gate_enum);
    SetEnum(FireOnly,ConfigV1,gate_enum);
    SetEnum(GateOnly,ConfigV1,gate_enum);
    SetEnum(FireAndGate,ConfigV1,gate_enum);
    SetEnum(DDG,ConfigV1,gate_enum);

    return gate_enum;
  } else {
    Py_DECREF(gate_enum);
    printf("get_enums(): Unsupported iStarConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  }
}

static PyObject* get_istar_delay_enum(pdsxtc* xtc)
{
  PyObject* delay_enum = PyDict_New();
  if (xtc->contains.version()==1) {
    SetEnum(Normal,ConfigV1,delay_enum);
    SetEnum(Fast,ConfigV1,delay_enum);

    return delay_enum;
  } else {
    Py_DECREF(delay_enum);
    printf("get_enums(): Unsupported iStarConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  }
}


PyObject* pds_iStarConfig_enum (PyObject*   self, PyObject* args)
{
  pdsxtc* xtc = (pdsxtc*)self;
  PyObject* o = PyDict_New();
  if (xtc->contains.version()==1) {

    SetEnumDict(cooling,get_istar_atbool_enum(xtc));
    SetEnumDict(overlap,get_istar_atbool_enum(xtc));
    SetEnumDict(noiseFilter,get_istar_atbool_enum(xtc));
    SetEnumDict(blemishCorrection,get_istar_atbool_enum(xtc));
    SetEnumDict(mcpIntelligate,get_istar_atbool_enum(xtc));

    SetEnumDict(fanSpeed,get_istar_fan_enum(xtc));
    SetEnumDict(readoutRate,get_istar_readout_enum(xtc));
    SetEnumDict(triggerMode,get_istar_trigger_enum(xtc));
    SetEnumDict(gainMode,get_istar_gain_enum(xtc));
    SetEnumDict(gateMode,get_istar_gate_enum(xtc));
    SetEnumDict(insertionDelay,get_istar_delay_enum(xtc));

    return o;
  }
  else {
    Py_DECREF(o);
    printf("get_enums(): Unsupported iStarConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  }
}

#undef SetEnum
#undef SetEnumDict


//  Return a dictionary of configuration data
#define SetDictMember(name,isFloat,isEnum,isSigned)       \
  { PyObject* v = NULL;                                   \
    if (isFloat)                                          \
      v = PyFloat_FromDouble(cfg->name());                \
    else if (isEnum)                                      \
      v = PyInt_FromLong((signed)cfg->name());            \
    else if (isSigned)                                    \
      v = PyLong_FromLong((signed)cfg->name());           \
    else                                                  \
      v = PyLong_FromUnsignedLong((unsigned)cfg->name()); \
    if (v) {                                              \
      PyDict_SetItemString(o,#name,v);                    \
      Py_DECREF(v);                                       \
    }                                                     \
  }

PyObject* pds_iStarConfig_get (PyObject*   self, PyObject* args)
{
  pdsxtc* xtc = (pdsxtc*)self;

  int icycle = 0;
  if (PyArg_ParseTuple(args,"|I",&icycle)==0)
    return NULL;

  unsigned isize = pds_iStarConfig_size(self);
  unsigned usize = isize*(icycle+1);

  if (xtc->extent < usize)
    return NULL;

  char* ubegin = xtc->payload + isize*icycle;

  PyObject* o = PyDict_New();
  if (xtc->contains.version()==1) {
    const Pds::iStar::ConfigV1* cfg =
      reinterpret_cast<const Pds::iStar::ConfigV1*>(ubegin);

    SetDictMember(cooling,false,true,false);
    SetDictMember(overlap,false,true,false);
    SetDictMember(noiseFilter,false,true,false);
    SetDictMember(blemishCorrection,false,true,false);
    SetDictMember(mcpIntelligate,false,true,false);
    SetDictMember(fanSpeed,false,true,false);
    SetDictMember(readoutRate,false,true,false);
    SetDictMember(triggerMode,false,true,false);
    SetDictMember(gainMode,false,true,false);
    SetDictMember(gateMode,false,true,false);
    SetDictMember(insertionDelay,false,true,false);
    SetDictMember(mcpGain,false,false,false);
    SetDictMember(width,false,false,false);
    SetDictMember(height,false,false,false);
    SetDictMember(orgX,false,false,false);
    SetDictMember(orgY,false,false,false);
    SetDictMember(binX,false,false,false);
    SetDictMember(binY,false,false,false);
    SetDictMember(exposureTime,true,false,false);
    SetDictMember(triggerDelay,true,false,false);

    return o;
  }
  else {
    Py_DECREF(o);
    printf("get(): Unsupported iStarConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  }

}
#undef SetDictMember


//  Retrieve configuration data from a Python Dictionary
#define GetDictEnum(name,type)                                          \
  type name;                                                            \
  { PyObject* i = PyDict_GetItemString(o,#name);                        \
    if (i) {                                                            \
      if (PyInt_CheckExact(i))  name = (type) PyInt_AsLong(i);          \
      else if (PyLong_CheckExact(i)) name = (type) PyLong_AsLong(i);    \
      else name = (type) cfg->name();                                   \
    }                                                                   \
    else name = cfg->name(); }

#define GetDictLong(name)                                         \
  unsigned long name;                                             \
  { PyObject* i = PyDict_GetItemString(o,#name);                  \
    if (i) {                                                      \
      if (PyLong_Check(i)) name = PyLong_AsUnsignedLong(i);       \
      else if (PyInt_Check(i)) name = PyInt_AsLong(i);            \
      else name = cfg->name();                                    \
    }                                                             \
    else name = cfg->name(); }

#define GetDictSignedLong(name)                                   \
  long name;                                                      \
  { PyObject* i = PyDict_GetItemString(o,#name);                  \
    if (i) {                                                      \
      if (PyLong_Check(i)) name = PyLong_AsLong(i);               \
      else if (PyInt_Check(i)) name = PyInt_AsLong(i);            \
      else name = cfg->name();                                    \
    }                                                             \
    else name = cfg->name(); }

#define GetDictFloat(name)                              \
  double name;                                          \
  { PyObject* i = PyDict_GetItemString(o,#name);        \
    if (i) {                                            \
      if (PyFloat_Check(i)) name = PyFloat_AsDouble(i); \
      else name = cfg->name();                          \
    }                                                   \
    else name = cfg->name(); }

PyObject* pds_iStarConfig_set    (PyObject*   self, PyObject* args)
{
  PyObject* o = 0;
  int icycle = 0;
  if (PyArg_ParseTuple(args,"O|I",&o,&icycle)==0)
    return NULL;

  pdsxtc* xtc = (pdsxtc*)self;
  unsigned isize = pds_iStarConfig_size(self);
  unsigned usize = isize*(icycle+1);

  if (xtc->extent < usize) {
    char* p = new char[usize];
    memcpy(p, xtc->payload, xtc->extent);
    delete[] xtc->payload;

    xtc->payload = p;
    xtc->extent  = usize;
  }

  char* ubegin = xtc->payload + icycle*isize;

  if (xtc->contains.version()==1) {
    const Pds::iStar::ConfigV1* cfg =
      reinterpret_cast<const Pds::iStar::ConfigV1*>(ubegin);

    GetDictEnum(cooling,Pds::iStar::ConfigV1::ATBool);
    GetDictEnum(overlap,Pds::iStar::ConfigV1::ATBool);
    GetDictEnum(noiseFilter,Pds::iStar::ConfigV1::ATBool);
    GetDictEnum(blemishCorrection,Pds::iStar::ConfigV1::ATBool);
    GetDictEnum(mcpIntelligate,Pds::iStar::ConfigV1::ATBool);
    GetDictEnum(fanSpeed,Pds::iStar::ConfigV1::FanSpeed);
    GetDictEnum(readoutRate,Pds::iStar::ConfigV1::ReadoutRate);
    GetDictEnum(triggerMode,Pds::iStar::ConfigV1::TriggerMode);
    GetDictEnum(gainMode,Pds::iStar::ConfigV1::GainMode);
    GetDictEnum(gateMode,Pds::iStar::ConfigV1::GateMode);
    GetDictEnum(insertionDelay,Pds::iStar::ConfigV1::InsertionDelay);
    GetDictLong(mcpGain);
    GetDictLong(width);
    GetDictLong(height);
    GetDictLong(orgX);
    GetDictLong(orgY);
    GetDictLong(binX);
    GetDictLong(binY);
    GetDictFloat(exposureTime);
    GetDictFloat(triggerDelay);
    new(ubegin) Pds::iStar::ConfigV1(cooling,
                                     overlap,
                                     noiseFilter,
                                     blemishCorrection,
                                     mcpIntelligate,
                                     fanSpeed,
                                     readoutRate,
                                     triggerMode,
                                     gainMode,
                                     gateMode,
                                     insertionDelay,
                                     (uint16_t) mcpGain,
                                     (uint32_t) width,
                                     (uint32_t) height,
                                     (uint32_t) orgX,
                                     (uint32_t) orgY,
                                     (uint32_t) binX,
                                     (uint32_t) binY,
                                     exposureTime,
                                     triggerDelay);
    Py_INCREF(Py_None);
    return Py_None;
  }
  else {
    printf("set(): Unsupported iStarConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  }
}

#undef GetDictEnum
#undef GetDictLong
#undef GetDictSignedLong
#undef GetDictFloat

unsigned pds_iStarConfig_size(PyObject* self)
{
  pdsxtc* xtc = (pdsxtc*)self;
  if (xtc->contains.id() == Pds::TypeId::Id_iStarConfig) {
    switch(xtc->contains.version()) {
      case 1:  return sizeof(Pds::iStar::ConfigV1);
     default: break;
    }
  }

  return 0;
}
