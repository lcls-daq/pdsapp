//
//  pds_Epix10kConfig class methods
//
static PyObject* pds_Epix10kConfig_get    (PyObject*   self, PyObject* args);
static PyObject* pds_Epix10kConfig_set    (PyObject*   self, PyObject* args);
static unsigned  pds_Epix10kConfig_size   (PyObject*   self);

static PyMethodDef pds_Epix10kConfig_methods[] = {
  {"get"   , (PyCFunction)pds_Epix10kConfig_get   , METH_VARARGS|METH_KEYWORDS, "Output the configuration"},
  {"set"   , (PyCFunction)pds_Epix10kConfig_set   , METH_VARARGS|METH_KEYWORDS, "Input the configuration"},
  {NULL},
};

DefineXtcType(Epix10kConfig) ;

  
#include "pdsdata/psddl/epix.ddl.h"
#include "pds/config/EpixConfigType.hh"
#include <new>

using namespace Pds::Epix;

//
//  Return a dictionary of configuration data
//
static PyObject* get_asic(const Asic10kConfigV1* cfg)
{
  PyObject* o = PyDict_New();
  Epix10kASIC_ConfigShadow* s = (Epix10kASIC_ConfigShadow*)cfg;
  
  for (unsigned i=0; i<Pds::Epix10kConfig::ASIC_ConfigV1::NumberOfRegisters; i++) {
    PyDict_SetItemString(o, 
        s->name((Pds::Epix10kConfig::ASIC_ConfigV1::Registers)i),
        PyLong_FromLong(s->get((Pds::Epix10kConfig::ASIC_ConfigV1::Registers)i)));
  }

  return o;
}


PyObject* pds_Epix10kConfig_get    (PyObject*   self, PyObject* args)
{
  pdsxtc* xtc = (pdsxtc*)self;
 
  int icycle;
  if (PyArg_ParseTuple(args,"I",&icycle)==0)
    icycle = 0;

  unsigned isize = pds_Epix10kConfig_size(self);
  unsigned usize = isize*(icycle+1);

  if (xtc->extent < usize)
    return NULL;

  char* ubegin = xtc->payload + isize*icycle;

  if(xtc->contains.version()==1) {
    const Pds::Epix::Config10KV1* cfg = 
      reinterpret_cast<const Pds::Epix::Config10KV1*>(ubegin);

    PyObject* o = PyDict_New();
    Epix10kConfigShadow* s = (Epix10kConfigShadow*)cfg;
    for (unsigned i=0; i<Pds::Epix10kConfig::ConfigV1::NumberOfRegisters; i++) {
      PyDict_SetItemString(o, 
          s->name((Pds::Epix10kConfig::ConfigV1::Registers)i),
          PyLong_FromLong(s->get((Pds::Epix10kConfig::ConfigV1::Registers)i)));
    }
    
    unsigned n = cfg->numberOfAsics();
    
    printf("Retrieving asics\n");
    { PyObject* l = PyList_New(n);
      for(unsigned i=0; i<n; i++)
        PyList_SetItem(l,i,get_asic(&cfg->asics(i)));
      PyDict_SetItemString(o,"asics",l); }

    printf("Retrieving Pixel Config Array\n");
    ndarray<const uint16_t,3> a = cfg->asicPixelConfigArray();
    { PyObject* apta = PyList_New(a.shape()[0]);
      for (unsigned i=0; i<a.shape()[0]; i++) {
        PyObject* rows = PyList_New(a.shape()[1]);
        for (unsigned j=0; j<a.shape()[1]; j++) {
          PyObject* pixels = PyList_New(a.shape()[2]);
          for (unsigned k=0; k<a.shape()[2]; k++) {
            PyList_SetItem(pixels, k, PyLong_FromLong(a[i][j][k]));
          }
          PyList_SetItem(rows, j, pixels);
        }
        PyList_SetItem(apta, i, rows);
      }
      PyDict_SetItemString(o, "asicPixelConfigArray", apta);
    }

    return o;
  }

  //  Throw an exception
  return NULL;
}
//
//  Retrieve configuration data from a Python Dictionary
//
static bool set_asic(Asic10kConfigV1* cfg,
                     PyObject* o)
{

  Epix10kASIC_ConfigShadow* s = (Epix10kASIC_ConfigShadow*)cfg;
  
  for (unsigned i=0; i<Pds::Epix10kConfig::ASIC_ConfigV1::NumberOfRegisters; i++) {
    PyObject * in = PyDict_GetItemString(o, s->name((Pds::Epix10kConfig::ASIC_ConfigV1::Registers)i));
    s->set((Pds::Epix10kConfig::ASIC_ConfigV1::Registers)i, PyLong_AsLong(in));
  }

  return true;
}


PyObject* pds_Epix10kConfig_set    (PyObject*   self, PyObject* args)
{
  PyObject* o = 0;
  PyObject* in = 0;
  int icycle = 0;
  if (PyArg_ParseTuple(args,"O|I",&o,&icycle)==0)
    return NULL;

  pdsxtc* xtc = (pdsxtc*)self;
      
  Pds::Epix::Config10KV1* myConfig = new Pds::Epix::Config10KV1(
      PyLong_AsLong(PyDict_GetItemString(o, "NumberOfAsicsPerRow")), 
      PyLong_AsLong(PyDict_GetItemString(o, "NumberOfAsicsPerColumn")), 
      PyLong_AsLong(PyDict_GetItemString(o, "NumberOfRowsPerAsic")), 
      PyLong_AsLong(PyDict_GetItemString(o, "NumberOfPixelsPerAsicRow")),
      PyLong_AsLong(PyDict_GetItemString(o, "LastRowExclusions")));

  unsigned isize = myConfig->_sizeof();
  unsigned usize = isize*(icycle+1);

  delete myConfig;
  
//  printf("pds_Epix10kConfig_set isize(%u) usize(%u) icycle(%u)\n", isize, usize, icycle);

  if (xtc->extent < usize) {
    char* p = new char[usize];
    memcpy(p, xtc->payload, xtc->extent);
    delete[] xtc->payload;
    xtc->payload = p;
    xtc->extent  = usize;
  }

  char* ubegin = xtc->payload + icycle*isize;

  if (xtc->contains.version()==1) {
    Pds::Epix::Config10KV1* cfg = 
        reinterpret_cast<Pds::Epix::Config10KV1*>(ubegin);
    
//    printf("pds_Epix10kConfig_set cfg %p\n", cfg);

    Epix10kConfigShadow* s = new(ubegin)Epix10kConfigShadow(true);
    for (unsigned i=0; i<Pds::Epix10kConfig::ConfigV1::NumberOfRegisters; i++) {
      in = PyDict_GetItemString(o, s->name((Pds::Epix10kConfig::ConfigV1::Registers)i));
      s->set((Pds::Epix10kConfig::ConfigV1::Registers)i, PyLong_AsLong(in));
    }
    
//    printf("pds_Epix10kConfig_set n %u, r %u, p, %u, cfg %p, s %p\n", n, r, p, cfg, s);
//    if ((n > 4) || (icycle == 0)) {
//      const uint32_t* q = reinterpret_cast<const uint32_t*>(cfg);
//      const uint32_t* qe = reinterpret_cast<const uint32_t*>(cfg+1);
//      while(q<qe) {
//        printf("%p: %08x\n",q,*q);
//        q++;
//      }
//      printf("Config ---\n");
//      for (unsigned i=0; i<Pds::Epix10kConfig::ConfigV1::NumberOfRegisters; i++) {
//        in = PyDict_GetItemString(o, s->name((Pds::Epix10kConfig::ConfigV1::Registers)i));
//        printf("\t%s  =  %u shadow has %u, offset is %u\n", 
//            s->name((Pds::Epix10kConfig::ConfigV1::Registers)i), 
//            PyLong_AsLong(in), 
//            s->get((Pds::Epix10kConfig::ConfigV1::Registers)i),
//            s->offset((Pds::Epix10kConfig::ConfigV1::Registers)i));
//      }  
//    }

    if ((in = PyDict_GetItemString(o,"asics"))) {
      for(unsigned q=0; q<PyList_Size(in); q++) {
        const Asic10kConfigV1& asic = cfg->asics(q);
        Asic10kConfigV1* ncptr = (Asic10kConfigV1*) &asic;
        if (!set_asic(ncptr,PyList_GetItem(in,q))) {
          Py_DECREF(o);
          return NULL;
        }
      }
    }

//    printf("Writing asic pixel config array, n %u, r %u, p, %u\n", n, r, p);
    PyObject* l = PyDict_GetItemString(o,"asicPixelConfigArray");
    if (l) {
      for (unsigned i=0; i<PyList_Size(l); i++) {
        PyObject* pta = PyList_GetItem(l, i);
        for (unsigned j=0; j<PyList_Size(pta); j++) {
          PyObject* row = PyList_GetItem(pta, j);
          for (unsigned k=0; k<PyList_Size(row); k++) {
            uint16_t* ncptr = (uint16_t*)&(cfg->asicPixelConfigArray()[i][j][k]);
            *ncptr = PyLong_AsLong(PyList_GetItem(row, k));
          }
        }
      }
    } else {
      return NULL;
    }
  }

  Py_INCREF(Py_None);
  return Py_None;
}

#undef SetMember

unsigned pds_Epix10kConfig_size(PyObject* self)
{
  pdsxtc* xtc = (pdsxtc*)self;
  if (xtc->contains.id() == Pds::TypeId::Id_Epix10kConfig) {
    switch(xtc->contains.version()) {
      case 1:  return ((Pds::Epix::Config10KV1*)xtc->payload)->_sizeof();
     default: break;
    }
  }

  return 0;
}
