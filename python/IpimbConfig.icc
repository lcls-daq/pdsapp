//
//  pds_IpimbConfig class methods
//
static PyObject* pds_IpimbConfig_get    (PyObject*   self, PyObject* args);
static PyObject* pds_IpimbConfig_set    (PyObject*   self, PyObject* args);

static PyMethodDef pds_IpimbConfig_methods[] = {
  {"get"   , (PyCFunction)pds_IpimbConfig_get   , METH_NOARGS  , "Output the configuration"},
  {"set"   , (PyCFunction)pds_IpimbConfig_set   , METH_KEYWORDS, "Input the configuration"},
  {NULL},
};

DefineXtcType(IpimbConfig) ;

#include "pdsdata/ipimb/ConfigV1.hh"
#include "pdsdata/ipimb/ConfigV2.hh"
#include <new>


//  Return a dictionary of configuration data
#define SetDictMember(name,isFloat,isLongLong)                                                 \
  { if (isFloat)                                                                               \
      PyDict_SetItemString(o,#name,PyFloat_FromDouble(cfg->name()));                         \
    else if (isLongLong)                                                                       \
      PyDict_SetItemString(o,#name,PyLong_FromUnsignedLongLong((unsigned long)cfg->name())); \
    else                                                                                       \
      PyDict_SetItemString(o,#name,PyLong_FromUnsignedLong((unsigned)cfg->name())); }


PyObject* pds_IpimbConfig_get (PyObject*   self, PyObject* args) 
{
  pdsxtc* xtc = (pdsxtc*)self;
  PyObject* o = PyDict_New();  
  if (xtc->contains.version()==1) { 
    const Pds::Ipimb::ConfigV1* cfg = 
      reinterpret_cast<const Pds::Ipimb::ConfigV1*>(xtc->payload);

    SetDictMember(triggerCounter,false,true);
    SetDictMember(serialID,false,true);
    SetDictMember(chargeAmpRange,false,false);
    SetDictMember(calibrationRange,false,false); 
    SetDictMember(resetLength,false,false);
    SetDictMember(resetDelay,false,false);
    SetDictMember(chargeAmpRefVoltage,true,false);
    SetDictMember(calibrationVoltage,true,false);
    SetDictMember(diodeBias,true,false);
    SetDictMember(status,false,false);
    SetDictMember(errors,false,false);
    SetDictMember(calStrobeLength,false,false);
    SetDictMember(trigDelay,false,false);

    return o;
  }
  else if (xtc->contains.version()==2) {
    const Pds::Ipimb::ConfigV2* cfg = 
      reinterpret_cast<const Pds::Ipimb::ConfigV2*>(xtc->payload);

    SetDictMember(triggerCounter,false,true);
    SetDictMember(serialID,false,true);
    SetDictMember(chargeAmpRange,false,false);
    SetDictMember(calibrationRange,false,false); 
    SetDictMember(resetLength,false,false);
    SetDictMember(resetDelay,false,false);
    SetDictMember(chargeAmpRefVoltage,true,false);
    SetDictMember(calibrationVoltage,true,false);
    SetDictMember(diodeBias,true,false);
    SetDictMember(status,false,false);
    SetDictMember(errors,false,false);
    SetDictMember(calStrobeLength,false,false);
    SetDictMember(trigDelay,false,false);
    SetDictMember(trigPsDelay,false,false);
    SetDictMember(adcDelay,false,false);

    return o;
  } 
  else {
    Py_DECREF(o);
    printf("get(): Unsupported IpimbConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  }

}
#undef SetDictMember


//  Retrieve configuration data from a Python Dictionary
#define SetDictMember(name)                                          \
  double name;                                                       \
  { PyObject* i = PyDict_GetItemString(o,#name);                     \
    if (i) {                                                         \
      if(PyFloat_Check(i))  name = PyFloat_AsDouble(i);              \
      else if (PyInt_CheckExact(i)) name = (double) PyInt_AsLong(i); \
      else  name = (double) PyLong_AsUnsignedLongLong(i);            \
    }                                                                \
    else name = (double) cfg->name();  }              


PyObject* pds_IpimbConfig_set    (PyObject*   self, PyObject* args)
{
  PyObject* o = 0;
  if (PyArg_ParseTuple(args,"O",&o)==0)
    return NULL;

  pdsxtc* xtc = (pdsxtc*)self;
  if (xtc->contains.version()==1) { 
    const Pds::Ipimb::ConfigV1* cfg = 
      reinterpret_cast<const Pds::Ipimb::ConfigV1*>(xtc->payload);

    SetDictMember(chargeAmpRange);
    SetDictMember(calibrationRange);
    SetDictMember(resetLength);
    SetDictMember(resetDelay);
    SetDictMember(chargeAmpRefVoltage);
    SetDictMember(calibrationVoltage);
    SetDictMember(diodeBias);
    SetDictMember(calStrobeLength);
    SetDictMember(trigDelay);
    new(xtc->payload) Pds::Ipimb::ConfigV1((uint16_t) chargeAmpRange,
                      (uint16_t) calibrationRange,
                      (uint32_t) resetLength,
                      (uint16_t) resetDelay,
                      (float) chargeAmpRefVoltage,
                      (float) calibrationVoltage,
                      (float) diodeBias,
                      (uint16_t) calStrobeLength,
                      (uint32_t) trigDelay);
    return Py_None;
  }
  else if (xtc->contains.version()==2) { 
    const Pds::Ipimb::ConfigV2* cfg = 
      reinterpret_cast<const Pds::Ipimb::ConfigV2*>(xtc->payload);

    SetDictMember(chargeAmpRange);
    SetDictMember(calibrationRange);
    SetDictMember(resetLength);
    SetDictMember(resetDelay);
    SetDictMember(chargeAmpRefVoltage);
    SetDictMember(calibrationVoltage);
    SetDictMember(diodeBias);
    SetDictMember(calStrobeLength);
    SetDictMember(trigDelay);
    SetDictMember(trigPsDelay);
    SetDictMember(adcDelay);
    new(xtc->payload) Pds::Ipimb::ConfigV2((uint16_t) chargeAmpRange,
                      (uint16_t) calibrationRange,
                      (uint32_t) resetLength,
                      (uint16_t) resetDelay,
                      (float) chargeAmpRefVoltage,
                      (float) calibrationVoltage,
                      (float) diodeBias,
                      (uint16_t) calStrobeLength,
                      (uint32_t) trigDelay,
                      (uint32_t) trigPsDelay,
                      (uint32_t) adcDelay); 
    return Py_None;
  }
  else {
    printf("set(): Unsupported IpimbConfig Version= %u \n",xtc->contains.version());
    return NULL; // Throw an exception
  }

}

#undef SetDictMember
