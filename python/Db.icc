#include "pdsapp/config/Experiment.hh"
#include "pds/config/PdsDefs.hh"
#include "pds/config/DbClient.hh"

#include <string>
#include <vector>
#include <sstream>
#include <fstream>
#include <iomanip>

#include <glob.h>

using std::vector;
using std::string;
using std::ostringstream;
using std::hex;
using std::setw;
using std::ifstream;
using std::ofstream;

using namespace Pds_ConfigDb;

//
//  pdsdb class methods
//
static void      pdsdb_dealloc(pdsdb* self);
static PyObject* pdsdb_new    (PyTypeObject* type, PyObject* args, PyObject* kwds);
static int       pdsdb_init   (pdsdb* self, PyObject* args, PyObject* kwds);
static PyObject* pdsdb_get    (PyObject* self, PyObject* args, PyObject* kwds);
static PyObject* pdsdb_set    (PyObject* self, PyObject* args, PyObject* kwds);
static PyObject* pdsdb_sync   (PyObject* self, PyObject* args, PyObject* kwds);
static PyObject* pdsdb_commit (PyObject* self, PyObject* args, PyObject* kwds);
static PyObject* pdsdb_clone  (PyObject* self, PyObject* args, PyObject* kwds);
static PyObject* pdsdb_sub    (PyObject* self, PyObject* args, PyObject* kwds);
static PyObject* pdsdb_get_key(PyObject* self, PyObject* args, PyObject* kwds);
static PyObject* pdsdb_evolve (PyObject* self, PyObject* args, PyObject* kwds);
static PyObject* pdsdb_unlock (PyObject* self, PyObject* args, PyObject* kwds);

static PyMethodDef pdsdb_methods[] = {
  {"get"       , (PyCFunction)pdsdb_get    , METH_VARARGS|METH_KEYWORDS, "Return the xtc data"},
  {"set"       , (PyCFunction)pdsdb_set    , METH_VARARGS|METH_KEYWORDS, "Insert the xtc data"},
  {"substitute", (PyCFunction)pdsdb_sub    , METH_VARARGS|METH_KEYWORDS, "Replace the xtc data"},
  {"sync"      , (PyCFunction)pdsdb_sync   , METH_NOARGS  , "Abandon changes and reread db"},
  {"commit"    , (PyCFunction)pdsdb_commit , METH_NOARGS  , "Commit changes and update db"},
  {"clone"     , (PyCFunction)pdsdb_clone  , METH_VARARGS , "Clone a key"},
  {"get_key"   , (PyCFunction)pdsdb_get_key, METH_VARARGS|METH_KEYWORDS, "Return the current key for an alias"},
  {"evolve"    , (PyCFunction)pdsdb_evolve , METH_VARARGS , "Upgrade xtc container to another version"},
  {"unlock"    , (PyCFunction)pdsdb_unlock , METH_NOARGS  , "Release the database"},
  {NULL},
};

//
//  Register pdsdb members
//
static PyMemberDef pdsdb_members[] = {
  {NULL} 
};

static PyTypeObject pdsdb_type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    "pycdb.Db",                /* tp_name */
    sizeof(pdsdb),             /* tp_basicsize */
    0,                         /* tp_itemsize */
    (destructor)pdsdb_dealloc, /*tp_dealloc*/
    0,                         /*tp_print*/
    0,                         /*tp_getattr*/
    0,                         /*tp_setattr*/
    0,                         /*tp_compare*/
    0,                         /*tp_repr*/
    0,                         /*tp_as_number*/
    0,                         /*tp_as_sequence*/
    0,                         /*tp_as_mapping*/
    0,                         /*tp_hash */
    0,                         /*tp_call*/
    0,                         /*tp_str*/
    0,                         /*tp_getattro*/
    0,                         /*tp_setattro*/
    0,                         /*tp_as_buffer*/
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,        /*tp_flags*/
    "pycdb Db objects",        /* tp_doc */
    0,                   /* tp_traverse */
    0,                   /* tp_clear */
    0,                   /* tp_richcompare */
    0,                   /* tp_weaklistoffset */
    0,                   /* tp_iter */
    0,                   /* tp_iternext */
    pdsdb_methods,             /* tp_methods */
    pdsdb_members,             /* tp_members */
    0,                         /* tp_getset */
    0,                         /* tp_base */
    0,                         /* tp_dict */
    0,                         /* tp_descr_get */
    0,                         /* tp_descr_set */
    0,                         /* tp_dictoffset */
    (initproc)pdsdb_init,      /* tp_init */
    0,                         /* tp_alloc */
    pdsdb_new,                 /* tp_new */
};
    
//
//  pdsdb class functions
//

static PyObject* _new_xtc(Pds::TypeId& contains)
{
  PyObject* o;
          switch(contains.id()) {
          case Pds::TypeId::Id_DiodeFexConfig:
            o = _PyObject_New(&pds_DiodeFexConfig_type);
            break;
          case Pds::TypeId::Id_IpmFexConfig:
            o = _PyObject_New(&pds_IpmFexConfig_type);
            break;  
          case Pds::TypeId::Id_IpimbConfig:
            o = _PyObject_New(&pds_IpimbConfig_type);
            break;      
          case Pds::TypeId::Id_CspadConfig:
            o = _PyObject_New(&pds_CspadConfig_type);
            break;
          case Pds::TypeId::Id_Cspad2x2Config:
            o = _PyObject_New(&pds_Cspad2x2Config_type);
            break;
          case Pds::TypeId::Id_EpixConfig:
            o = _PyObject_New(&pds_EpixConfig_type);
            break;
          case Pds::TypeId::Id_Epix10kConfig:
            o = _PyObject_New(&pds_Epix10kConfig_type);
            break;
          case Pds::TypeId::Id_Epix100aConfig:
            o = _PyObject_New(&pds_Epix100aConfig_type);
            break;
          case Pds::TypeId::Id_Epix10kaConfig:
            o = _PyObject_New(&pds_Epix10kaConfig_type);
            break;
          case Pds::TypeId::Id_PrincetonConfig:
            o = _PyObject_New(&pds_PrincetonConfig_type);
            break;
          case Pds::TypeId::Id_EvrConfig:
            o = _PyObject_New(&pds_EvrConfig_type);
            break;
          case Pds::TypeId::Id_FliConfig:
            o = _PyObject_New(&pds_FliConfig_type);
            break;
          case Pds::TypeId::Id_AndorConfig:
            o = _PyObject_New(&pds_AndorConfig_type);
            break;
          case Pds::TypeId::Id_Andor3dConfig:
            o = _PyObject_New(&pds_Andor3dConfig_type);
            break;
          case Pds::TypeId::Id_PimaxConfig:
            o = _PyObject_New(&pds_PimaxConfig_type);
            break;
          case Pds::TypeId::Id_PixisConfig:
            o = _PyObject_New(&pds_PixisConfig_type);
            break;
          case Pds::TypeId::Id_RayonixConfig:
            o = _PyObject_New(&pds_RayonixConfig_type);
            break;
          case Pds::TypeId::Id_AcqConfig:
            o = _PyObject_New(&pds_AcqirisConfig_type);
            break;
          case Pds::TypeId::Id_TimeToolConfig:
            o = _PyObject_New(&pds_TimeToolConfig_type);
            break;
          case Pds::TypeId::Id_UsdUsbFexConfig:
            o = _PyObject_New(&pds_UsdUsbFexConfig_type);
            break;
          case Pds::TypeId::Id_JungfrauConfig:
            o = _PyObject_New(&pds_JungfrauConfig_type);
            break;
          case Pds::TypeId::Id_ZylaConfig:
            o = _PyObject_New(&pds_ZylaConfig_type);
            break;
          case Pds::TypeId::Id_UxiConfig:
            o = _PyObject_New(&pds_UxiConfig_type);
            break;
          case Pds::TypeId::Id_ArchonConfig:
            o = _PyObject_New(&pds_ArchonConfig_type);
            break;
          default:
            o = _PyObject_New(&pds_Xtc_type);
            break;
          }
  return o;
}

void pdsdb_dealloc(pdsdb* self)
{
  if (self->expt) {
    delete self->expt;
  }

  Py_TYPE(self)->tp_free((PyObject*)self);
}

PyObject* pdsdb_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
  pdsdb* self;

  self = (pdsdb*)type->tp_alloc(type,0);
  if (self != NULL) {
    self->expt = 0;
  }

  return (PyObject*)self;
}

int pdsdb_init(pdsdb* self, PyObject* args, PyObject* kwds)
{
  int sts;

  { const char* kwlist[] = {"path",NULL};
    const char *path = 0;
    sts = MyArg_ParseTupleAndKeywords(args,kwds,"s",const_cast<char**>(kwlist),
                                      &path);
    if (sts) {
      self->expt = new Experiment(path);
      self->expt->read();
      return 0;
    }
  }
  return -1;
}

//
//  Return a configuration object of type <type> from <src> associated with <key>
//
PyObject* pdsdb_get(PyObject* self_o, PyObject* args, PyObject* kwds)
{
  pdsdb* self = reinterpret_cast<pdsdb*>(self_o);

  if (!self->expt) {
    PyErr_SetString(PyExc_RuntimeError,"No lock on database");
    return NULL;
  }

  PyObject* result = PyTuple_New(0);

  const unsigned Default(0xffffffff);
  unsigned key   (Default);
  unsigned phy   (Default);
  unsigned level (Default);
  unsigned typid (Default);
  const char* alias = 0;
  const char* file  = 0;

  while(1) {
    { const char* kwlist[] = {"key"  ,"src"  ,"typeid", NULL };
      if ( MyArg_ParseTupleAndKeywords(args,kwds,"I|II",kwlist,
                                       &key  ,&phy  ,&typid) != 0)
        break; }

    { const char* kwlist[] = {"key"  ,"level","typeid", NULL };
      if ( MyArg_ParseTupleAndKeywords(args,kwds,"I|II",kwlist,
                                       &key  ,&level,&typid) != 0)
        break; }

    { const char* kwlist[] = {"key"  ,"typeid", NULL };
      if ( MyArg_ParseTupleAndKeywords(args,kwds,"I|I",kwlist,
                                       &key  ,&typid) != 0)
        break; }

    { const char* kwlist[] = {"alias","src"  ,"typeid", NULL };
      if ( MyArg_ParseTupleAndKeywords(args,kwds,"s|II",kwlist,
                                       &alias,&phy  ,&typid) != 0)
        break; }

    { const char* kwlist[] = {"alias","level","typeid", NULL };
      if ( MyArg_ParseTupleAndKeywords(args,kwds,"s|II",kwlist,
                                       &alias,&level,&typid) != 0)
        break; }

    { const char* kwlist[] = {"alias","typeid", NULL };
      if ( MyArg_ParseTupleAndKeywords(args,kwds,"s|I",kwlist,
                                       &alias,&typid) != 0)
        break; }

    { const char* kwlist[] = {"file","src","typeid", NULL };
      if ( MyArg_ParseTupleAndKeywords(args,kwds,"s|II",kwlist,
                                       &file,&phy,&typid) != 0)
        break; }

    PyErr_Clear();

    return result;
  }

  PyErr_Clear();

  if (file!=0) {
    if (typid==Default || phy==Default)
      return result;

    Pds::TypeId contains(Pds::TypeId::Type(typid&0xffff),
                         typid>>16);

    Pds::DetInfo info(0, 
                      Pds::DetInfo::Detector((phy>>24)&0xff), (phy>>16)&0xff,
                      Pds::DetInfo::Device  ((phy>> 8)&0xff), (phy>> 0)&0xff);
        
    XtcEntry x;
    x.type_id = contains;
    x.name    = file;
    int sz = self->expt->path().getXTC(x);
    if (sz <= 0) {
      PyErr_SetString(PyExc_RuntimeError,
	              (std::string("Failed to retrieve ")+x.name).c_str());
      return NULL;
    }

    int i = PyTuple_Size(result);
    _PyTuple_Resize(&result, i+1);

    PyObject* o   = _new_xtc(contains);
    pdsxtc* xtc   = (pdsxtc*)o;
    xtc->src      = info;
    xtc->contains = contains;
    xtc->extent   = sz;
    xtc->payload  = new char[sz];
    self->expt->path().getXTC(x,xtc->payload,sz);

    PyTuple_SetItem(result,i,o);

    return result;    
  }

  if (key==Default) {
    const TableEntry* entry = self->expt->table().get_top_entry(alias);
    if (entry) {
      key = strtoul(entry->key().c_str(),NULL,16);
    }
    else
      printf("alias lookup for %s failed\n",alias);
  }

  if (key==Default) {
    return result;
  }

  std::list<KeyEntry> entries = self->expt->path().getKey(key);
  for(std::list<KeyEntry>::iterator it=entries.begin();
      it!=entries.end(); it++) {
    DeviceEntry dev(it->source);
    if ((level==Default               && phy==dev.phy()) ||
        (level==unsigned(dev.level()) && phy==Default ) ||
        (level==Default               && phy==Default)) {
      if (typid==Default ||
          typid==it->xtc.type_id.value() ||
          typid==unsigned(it->xtc.type_id.id())) {

        int sz = self->expt->path().getXTC(it->xtc);
        if (sz <= 0) {
          PyErr_SetString(PyExc_RuntimeError,
	                  (std::string("Failed to retrieve ")+it->xtc.name).c_str());
          return NULL;
        }

        int i = PyTuple_Size(result);
        _PyTuple_Resize(&result, i+1);

        PyObject* o = _new_xtc(it->xtc.type_id);
        pdsxtc* xtc   = (pdsxtc*)o;
        xtc->src      = dev;
        xtc->contains = it->xtc.type_id;
        xtc->extent   = sz;
        xtc->payload  = new char[sz];
        self->expt->path().getXTC(it->xtc,xtc->payload,sz);

        PyTuple_SetItem(result,i,o);
      }
    }
  }

  return result;
}


//
//  Insert a configuration object of type <type> from <src> associated with <alias>
//
PyObject* pdsdb_set(PyObject* self_o, PyObject* args, PyObject* kwds)
{
  pdsdb* self = reinterpret_cast<pdsdb*>(self_o);

  if (!self->expt) {
    PyErr_SetString(PyExc_RuntimeError,"No lock on database");
    return NULL;
  }

  const char* alias = 0;
  const char* file  = 0;
  PyObject* o;

  while(1) {

    { const char* kwlist[] = {"xtc", "alias", "file", NULL };
      if ( MyArg_ParseTupleAndKeywords(args,kwds,"O|ss",kwlist,
                                       &o, &alias, &file) != 0)
        break; }

    return NULL;
  }

  if (Py_TYPE(o)->tp_new!=pdsxtc_new) {
    printf("TypeCheck failed\n");
    return NULL;
  }
  
  //printf("pdsdb_set(): file %s alias %s xtc1 %p\n", file, alias, o);

  pdsxtc* xtc = (pdsxtc*)o;

  if (file != 0) {
    XtcEntry x;
    x.type_id = xtc->contains;
    x.name    = file;
    self->expt->path().setXTC(x, xtc->payload, xtc->extent);

    Py_INCREF(Py_None);
    return Py_None;
  }

  std::list<ExptAlias>  alist = self->expt->path().getExptAliases();
  std::list<DeviceType> dlist = self->expt->path().getDevices();

  for(std::list<ExptAlias>::iterator ait=alist.begin(); ait!=alist.end(); ait++)
    if (ait->name == alias)  // experiment alias match
      for(std::list<DeviceEntryRef>::iterator eit=ait->devices.begin();
          eit!=ait->devices.end(); eit++)
        for(std::list<DeviceType>::iterator dit=dlist.begin();
            dit!=dlist.end(); dit++)
          if (eit->device == dit->name) { // device name match
	    bool lmatch=false;            // source match
            for(std::list<uint64_t>::iterator sit=dit->sources.begin();
                sit!=dit->sources.end(); sit++) {
              DeviceEntry dev(*sit);
              if (dev.phy()   == xtc->src.phy() &&
                  dev.level() == xtc->src.level()) {
                lmatch=true;
                break;
              }
            }
            if (!lmatch) continue;
            for(std::list<DeviceEntries>::iterator qit=dit->entries.begin();
                qit!=dit->entries.end(); qit++)
              if (qit->name == eit->name)  // device alias match
                for(std::list<XtcEntry>::iterator xit=qit->entries.begin();
                    xit!=qit->entries.end(); xit++)
                  if (xit->type_id.value() == xtc->contains.value()) {  // typeid match
                    self->expt->path().setXTC(*xit, xtc->payload, xtc->extent);
                    Py_INCREF(Py_None);
                    return Py_None;
                  }
          }
  PyErr_SetString(PyExc_RuntimeError,"No match found for alias, source, and type");
  return NULL;
}


//
//  Substitute a configuration xtc for the particular key <key>
//
PyObject* pdsdb_sub(PyObject* self_o, PyObject* args, PyObject* kwds)
{
  pdsdb* self = reinterpret_cast<pdsdb*>(self_o);

  if (!self->expt) {
    PyErr_SetString(PyExc_RuntimeError,"No lock on database");
    return NULL;
  }

  unsigned key = 0;
  PyObject* o;
  int sts = PyArg_ParseTuple(args,"IO",&key,&o);

  if (sts==0) {
    printf("Parse failed\n");
    return NULL;
  }

  if (Py_TYPE(o)->tp_new!=pdsxtc_new) {
    printf("TypeCheck failed\n");
    return NULL;
  }

  pdsxtc* xtc = (pdsxtc*)o;
  self->expt->substitute(key, xtc->src, xtc->contains, xtc->payload, xtc->extent);

  Py_INCREF(Py_None);
  return Py_None;
}

PyObject* pdsdb_sync (PyObject* self_o, PyObject* args, PyObject* kwds)
{
  pdsdb* self = reinterpret_cast<pdsdb*>(self_o);

  if (!self->expt) {
    PyErr_SetString(PyExc_RuntimeError,"No lock on database");
    return NULL;
  }

  self->expt->read();
  Py_INCREF(Py_None);
  return Py_None;
}

PyObject* pdsdb_commit (PyObject* self_o, PyObject* args, PyObject* kwds)
{
  pdsdb* self = reinterpret_cast<pdsdb*>(self_o);

  if (!self->expt) {
    PyErr_SetString(PyExc_RuntimeError,"No lock on database");
    return NULL;
  }

  self->expt->update_keys();
  self->expt->write();
  Py_INCREF(Py_None);
  return Py_None;
}

PyObject* pdsdb_clone  (PyObject* self_o, PyObject* args, PyObject* kwds)
{
  pdsdb* self = reinterpret_cast<pdsdb*>(self_o);

  if (!self->expt) {
    PyErr_SetString(PyExc_RuntimeError,"No lock on database");
    return NULL;
  }

  const char* alias=0;
  int sts = PyArg_ParseTuple(args,"s",&alias);

  if (sts==0) {
    printf("Parse failed\n");
    return NULL;
  }

  unsigned newkey = self->expt->clone(alias);

  return PyLong_FromLong(newkey);
}

PyObject* pdsdb_get_key(PyObject* self_o, PyObject* args, PyObject* kwds)
{
  pdsdb* self = reinterpret_cast<pdsdb*>(self_o);
  
  if (!self->expt) {
    PyErr_SetString(PyExc_RuntimeError,"No lock on database");
    return NULL;
  }

  const char* alias = 0;

  if (PyArg_ParseTuple(args,"s",&alias)==0) {
    return NULL;
  }

  self->expt->read();
  int key = self->expt->current_key(string(alias));
  if (key == -1) {
    char buff[128];
    sprintf(buff,"Failed to lookup key for alias %s",alias);
    PyErr_SetString(PyExc_RuntimeError,buff);
    return NULL;
  }

  return PyLong_FromLong(key);
}

//
//  Change the container tag on an xtc object
//
PyObject* pdsdb_evolve(PyObject* self_o, PyObject* args, PyObject* kwds)
{
  unsigned typid = 0;
  PyObject* o;
  int sts = PyArg_ParseTuple(args,"IO",&typid,&o);

  if (sts==0) {
    printf("Parse failed\n");
    return NULL;
  }

  if (Py_TYPE(o)->tp_new!=pdsxtc_new) {
    printf("TypeCheck failed\n");
    return NULL;
  }

  pdsxtc* xtc = (pdsxtc*)o;

  Pds::TypeId contains(Pds::TypeId::Type(typid&0xffff), typid>>16);
  if (contains.version()==0)
    contains = Pds::TypeId(xtc->contains.id(), typid&0xffff);

  unsigned extent;
  switch(contains.id()) {
  case Pds::TypeId::Id_DiodeFexConfig:
    o = _PyObject_New(&pds_DiodeFexConfig_type);
    extent = (contains.version()==1) ? 
      sizeof(Pds::Lusi::DiodeFexConfigV1) :
      sizeof(Pds::Lusi::DiodeFexConfigV2);
    break;
  case Pds::TypeId::Id_IpmFexConfig:
    o = _PyObject_New(&pds_IpmFexConfig_type);
    extent = (contains.version()==1) ? 
      sizeof(Pds::Lusi::IpmFexConfigV1) :
      sizeof(Pds::Lusi::IpmFexConfigV2);
    break;  
  case Pds::TypeId::Id_IpimbConfig:
    o = _PyObject_New(&pds_IpimbConfig_type);
    extent = (contains.version()==1) ? 
      sizeof(Pds::Ipimb::ConfigV1) :
      sizeof(Pds::Ipimb::ConfigV2);
    break;      
  case Pds::TypeId::Id_RayonixConfig:
    o = _PyObject_New(&pds_RayonixConfig_type);
    extent = sizeof(Pds::Rayonix::ConfigV2);
    break;
  case Pds::TypeId::Id_AcqConfig:
    o = _PyObject_New(&pds_AcqirisConfig_type);
    extent = sizeof(Pds::Acqiris::ConfigV1);
    break;
  case Pds::TypeId::Id_CspadConfig:
    o = _PyObject_New(&pds_CspadConfig_type);
    switch(contains.version()) {
    case 1 : extent = sizeof(Pds::CsPad::ConfigV1); break;
    case 2 : extent = sizeof(Pds::CsPad::ConfigV2); break;
    default: extent = sizeof(Pds::CsPad::ConfigV3); break;
    }
    break;
  case Pds::TypeId::Id_EvrConfig:
    o = _PyObject_New(&pds_EvrConfig_type);
    extent = 4;
    break;
  default:
    return NULL;
  }

  pdsxtc* oxtc = (pdsxtc*)o;
  oxtc->src      = xtc->src;
  oxtc->contains = contains;
  oxtc->extent   = extent;
  oxtc->payload  = new char[extent];
  memset(oxtc->payload, 0, extent);
  return o;
}

//
//  Release the database lock
//
PyObject* pdsdb_unlock(PyObject* self_o, PyObject* args, PyObject* kwds)
{
  pdsdb* self = reinterpret_cast<pdsdb*>(self_o);

  if (self->expt) {
    delete self->expt;
    self->expt = 0;
  }

  Py_INCREF(Py_None);
  return Py_None;
}
