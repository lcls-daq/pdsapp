//
//  pds_CspadConfig class methods
//
static PyObject* pds_CspadConfig_get    (PyObject*   self, PyObject* args);
static PyObject* pds_CspadConfig_set    (PyObject*   self, PyObject* args);
static unsigned  pds_CspadConfig_size   (PyObject*   self);

static PyMethodDef pds_CspadConfig_methods[] = {
  {"get"   , (PyCFunction)pds_CspadConfig_get   , METH_KEYWORDS, "Output the configuration"},
  {"set"   , (PyCFunction)pds_CspadConfig_set   , METH_KEYWORDS, "Input the configuration"},
  {NULL},
};

DefineXtcType(CspadConfig) ;

  
#include "pdsdata/psddl/cspad.ddl.h"
#include <new>

using namespace Pds::CsPad;

//
//  Return a dictionary of configuration data
//
#define SetMember(name) PyDict_SetItemString(o,#name,PyLong_FromLong(cfg->name()))

static PyObject* get_quad(const ConfigV1QuadReg* cfg)
{
  PyObject* o = PyDict_New();
  
  { PyObject* l = PyList_New(TwoByTwosPerQuad);
    for(unsigned i=0; i<TwoByTwosPerQuad; i++)
      PyList_SetItem(l,i,PyLong_FromLong(cfg->shiftSelect()[i]));
    PyDict_SetItemString(o,"shiftSelect",l); }

  { PyObject* l = PyList_New(TwoByTwosPerQuad);
    for(unsigned i=0; i<TwoByTwosPerQuad; i++)
      PyList_SetItem(l,i,PyLong_FromLong(cfg->edgeSelect()[i]));
    PyDict_SetItemString(o,"edgeSelect",l); }

  SetMember(readClkSet);
  SetMember(readClkHold);
  SetMember(dataMode);
  SetMember(prstSel);
  SetMember(acqDelay);
  SetMember(intTime);
  SetMember(digDelay);
  SetMember(ampIdle);
  SetMember(injTotal);
  SetMember(rowColShiftPer);

  PyDict_SetItemString(o,"shiftTest",PyLong_FromLong(cfg->ro().shiftTest()));
  PyDict_SetItemString(o,"version"  ,PyLong_FromLong(cfg->ro().version()));

  { PyObject* l = PyList_New(PotsPerQuad);
    for(unsigned i=0; i<PotsPerQuad; i++)
      PyList_SetItem(l,i,PyLong_FromLong(cfg->dp().pots()[i]));
    PyDict_SetItemString(o,"pots",l); }

  { PyObject* columns = PyList_New(ColumnsPerASIC);
    for(unsigned i=0; i<ColumnsPerASIC; i++) {
      PyObject* row = PyList_New(MaxRowsPerASIC);
      for(unsigned j=0; j<MaxRowsPerASIC; j++)
        PyList_SetItem(row,j,PyLong_FromLong(cfg->gm().gainMap()[i][j]));
      PyList_SetItem(columns,i,row); 
    }
    PyDict_SetItemString(o,"gain",columns); }

  return o;
}

static PyObject* get_quad(const ConfigV2QuadReg* cfg)
{
  PyObject* o = PyDict_New();
  
  { PyObject* l = PyList_New(TwoByTwosPerQuad);
    for(unsigned i=0; i<TwoByTwosPerQuad; i++)
      PyList_SetItem(l,i,PyLong_FromLong(cfg->shiftSelect()[i]));
    PyDict_SetItemString(o,"shiftSelect",l); }

  { PyObject* l = PyList_New(TwoByTwosPerQuad);
    for(unsigned i=0; i<TwoByTwosPerQuad; i++)
      PyList_SetItem(l,i,PyLong_FromLong(cfg->edgeSelect()[i]));
    PyDict_SetItemString(o,"edgeSelect",l); }

  SetMember(readClkSet);
  SetMember(readClkHold);
  SetMember(dataMode);
  SetMember(prstSel);
  SetMember(acqDelay);
  SetMember(intTime);
  SetMember(digDelay);
  SetMember(ampIdle);
  SetMember(injTotal);
  SetMember(rowColShiftPer);
  SetMember(ampReset);
  SetMember(digCount);
  SetMember(digPeriod);

  PyDict_SetItemString(o,"shiftTest",PyLong_FromLong(cfg->ro().shiftTest()));
  PyDict_SetItemString(o,"version"  ,PyLong_FromLong(cfg->ro().version()));

  { PyObject* l = PyList_New(PotsPerQuad);
    for(unsigned i=0; i<PotsPerQuad; i++)
      PyList_SetItem(l,i,PyLong_FromLong(cfg->dp().pots()[i]));
    PyDict_SetItemString(o,"pots",l); }

  { PyObject* columns = PyList_New(ColumnsPerASIC);
    for(unsigned i=0; i<ColumnsPerASIC; i++) {
      PyObject* row = PyList_New(MaxRowsPerASIC);
      for(unsigned j=0; j<MaxRowsPerASIC; j++)
        PyList_SetItem(row,j,PyLong_FromLong(cfg->gm().gainMap()[i][j]));
      PyList_SetItem(columns,i,row); 
    }
    PyDict_SetItemString(o,"gain",columns); }

  return o;
}

static PyObject* get_quad(const ConfigV3QuadReg* cfg)
{
  PyObject* o = PyDict_New();
  
  { PyObject* l = PyList_New(TwoByTwosPerQuad);
    for(unsigned i=0; i<TwoByTwosPerQuad; i++)
      PyList_SetItem(l,i,PyLong_FromLong(cfg->shiftSelect()[i]));
    PyDict_SetItemString(o,"shiftSelect",l); }

  { PyObject* l = PyList_New(TwoByTwosPerQuad);
    for(unsigned i=0; i<TwoByTwosPerQuad; i++)
      PyList_SetItem(l,i,PyLong_FromLong(cfg->edgeSelect()[i]));
    PyDict_SetItemString(o,"edgeSelect",l); }

  SetMember(readClkSet);
  SetMember(readClkHold);
  SetMember(dataMode);
  SetMember(prstSel);
  SetMember(acqDelay);
  SetMember(intTime);
  SetMember(digDelay);
  SetMember(ampIdle);
  SetMember(injTotal);
  SetMember(rowColShiftPer);
  SetMember(ampReset);
  SetMember(digCount);
  SetMember(digPeriod);

  PyDict_SetItemString(o,"shiftTest",PyLong_FromLong(cfg->ro().shiftTest()));
  PyDict_SetItemString(o,"version"  ,PyLong_FromLong(cfg->ro().version()));

  { PyObject* l = PyList_New(PotsPerQuad);
    for(unsigned i=0; i<PotsPerQuad; i++)
      PyList_SetItem(l,i,PyLong_FromLong(cfg->dp().pots()[i]));
    PyDict_SetItemString(o,"pots",l); }

  { PyObject* columns = PyList_New(ColumnsPerASIC);
    for(unsigned i=0; i<ColumnsPerASIC; i++) {
      PyObject* row = PyList_New(MaxRowsPerASIC);
      for(unsigned j=0; j<MaxRowsPerASIC; j++)
        PyList_SetItem(row,j,PyLong_FromLong(cfg->gm().gainMap()[i][j]));
      PyList_SetItem(columns,i,row); 
    }
    PyDict_SetItemString(o,"gain",columns); }

  return o;
}

PyObject* pds_CspadConfig_get    (PyObject*   self, PyObject* args)
{
  pdsxtc* xtc = (pdsxtc*)self;
 
  int icycle;
  if (PyArg_ParseTuple(args,"I",&icycle)==0)
    icycle = 0;

  PyErr_Clear();

  unsigned isize = pds_CspadConfig_size(self);
  unsigned usize = isize*(icycle+1);

  if (xtc->extent < usize)
    return NULL;

  char* ubegin = xtc->payload + isize*icycle;

  if(xtc->contains.version()==1) {
    const Pds::CsPad::ConfigV1* cfg = 
      reinterpret_cast<const Pds::CsPad::ConfigV1*>(ubegin);

    PyObject* o = PyDict_New();
    SetMember(concentratorVersion);
    SetMember(runDelay);
    SetMember(eventCode);
    SetMember(inactiveRunMode);
    SetMember(activeRunMode);
    SetMember(tdi);
    SetMember(payloadSize);
    SetMember(badAsicMask0);
    SetMember(badAsicMask1);
    SetMember(asicMask);
    SetMember(quadMask);

    printf("Retrieving quads\n");

    { PyObject* l = PyList_New(MaxQuadsPerSensor);
      for(unsigned i=0; i<MaxQuadsPerSensor; i++)
        PyList_SetItem(l,i,get_quad(&cfg->quads(i)));
      PyDict_SetItemString(o,"quads",l); }

    return o;
  }
  else if (xtc->contains.version()==2) {
    const ConfigV2* cfg = 
      reinterpret_cast<const ConfigV2*>(ubegin);

    PyObject* o = PyDict_New();
    SetMember(concentratorVersion);
    SetMember(runDelay);
    SetMember(eventCode);
    SetMember(inactiveRunMode);
    SetMember(activeRunMode);
    SetMember(tdi);
    SetMember(payloadSize);
    SetMember(badAsicMask0);
    SetMember(badAsicMask1);
    SetMember(asicMask);
    SetMember(quadMask);

    { PyObject* l = PyList_New(MaxQuadsPerSensor);
      for(unsigned i=0; i<MaxQuadsPerSensor; i++)
        PyList_SetItem(l,i,PyLong_FromLong(cfg->roiMask(i)));
      PyDict_SetItemString(o,"roiMask",l); }

    { PyObject* l = PyList_New(MaxQuadsPerSensor);
      for(unsigned i=0; i<MaxQuadsPerSensor; i++)
        PyList_SetItem(l,i,get_quad(&cfg->quads(i)));
      PyDict_SetItemString(o,"quads",l); }

    return o;
  }
  else if (xtc->contains.version()==3) {
    const ConfigV3* cfg = 
      reinterpret_cast<const ConfigV3*>(ubegin);

    PyObject* o = PyDict_New();
    SetMember(concentratorVersion);
    SetMember(runDelay);
    SetMember(eventCode);
    SetMember(inactiveRunMode);
    SetMember(activeRunMode);
    SetMember(tdi);
    SetMember(payloadSize);
    SetMember(badAsicMask0);
    SetMember(badAsicMask1);
    SetMember(asicMask);
    SetMember(quadMask);

    { PyObject* l = PyList_New(MaxQuadsPerSensor);
      for(unsigned i=0; i<MaxQuadsPerSensor; i++)
        PyList_SetItem(l,i,PyLong_FromLong(cfg->roiMask(i)));
      PyDict_SetItemString(o,"roiMask",l); }

    { PyObject* l = PyList_New(MaxQuadsPerSensor);
      for(unsigned i=0; i<MaxQuadsPerSensor; i++)
        PyList_SetItem(l,i,get_quad(&cfg->quads(i)));
      PyDict_SetItemString(o,"quads",l); }

    { PyObject* l = PyList_New(MaxQuadsPerSensor);
      ndarray<const Pds::CsPad::ProtectionSystemThreshold,1> pst = cfg->protectionThresholds();
      for(unsigned i=0; i<MaxQuadsPerSensor; i++) {
	PyObject* p = PyDict_New();
        PyDict_SetItemString(p,"adcThreshold",
                             PyLong_FromLong(pst[i].adcThreshold()));
        PyDict_SetItemString(p,"pixelCountThreshold",
                             PyLong_FromLong(pst[i].pixelCountThreshold()));
        PyList_SetItem(l,i,p); 
      }
      PyDict_SetItemString(o,"protectionEnable",
                           PyLong_FromLong(cfg->protectionEnable()));
      PyDict_SetItemString(o,"protectionSystem",l); }

    return o;
  }
  else if (xtc->contains.version()==4) {
    const ConfigV4* cfg = 
      reinterpret_cast<const ConfigV4*>(ubegin);

    PyObject* o = PyDict_New();
    SetMember(concentratorVersion);
    SetMember(runDelay);
    SetMember(eventCode);
    SetMember(inactiveRunMode);
    SetMember(activeRunMode);
    SetMember(tdi);
    SetMember(payloadSize);
    SetMember(badAsicMask0);
    SetMember(badAsicMask1);
    SetMember(asicMask);
    SetMember(quadMask);

    { PyObject* l = PyList_New(MaxQuadsPerSensor);
      for(unsigned i=0; i<MaxQuadsPerSensor; i++)
        PyList_SetItem(l,i,PyLong_FromLong(cfg->roiMask(i)));
      PyDict_SetItemString(o,"roiMask",l); }

    { PyObject* l = PyList_New(MaxQuadsPerSensor);
      for(unsigned i=0; i<MaxQuadsPerSensor; i++)
        PyList_SetItem(l,i,get_quad(&cfg->quads(i)));
      PyDict_SetItemString(o,"quads",l); }

    { PyObject* l = PyList_New(MaxQuadsPerSensor);
      ndarray<const Pds::CsPad::ProtectionSystemThreshold,1> pst = cfg->protectionThresholds();
      for(unsigned i=0; i<MaxQuadsPerSensor; i++) {
	PyObject* p = PyDict_New();
        PyDict_SetItemString(p,"adcThreshold",
                             PyLong_FromLong(pst[i].adcThreshold()));
        PyDict_SetItemString(p,"pixelCountThreshold",
                             PyLong_FromLong(pst[i].pixelCountThreshold()));
        PyList_SetItem(l,i,p); 
      }
      PyDict_SetItemString(o,"protectionEnable",
                           PyLong_FromLong(cfg->protectionEnable()));
      PyDict_SetItemString(o,"protectionSystem",l); }

    return o;
  }
  else if (xtc->contains.version()==5) {
    const ConfigV5* cfg = 
      reinterpret_cast<const ConfigV5*>(ubegin);

    PyObject* o = PyDict_New();
    SetMember(concentratorVersion);
    SetMember(runDelay);
    SetMember(eventCode);
    SetMember(inactiveRunMode);
    SetMember(activeRunMode);
    SetMember(internalTriggerDelay);
    SetMember(tdi);
    SetMember(payloadSize);
    SetMember(badAsicMask0);
    SetMember(badAsicMask1);
    SetMember(asicMask);
    SetMember(quadMask);

    { PyObject* l = PyList_New(MaxQuadsPerSensor);
      for(unsigned i=0; i<MaxQuadsPerSensor; i++)
        PyList_SetItem(l,i,PyLong_FromLong(cfg->roiMask(i)));
      PyDict_SetItemString(o,"roiMask",l); }

    { PyObject* l = PyList_New(MaxQuadsPerSensor);
      for(unsigned i=0; i<MaxQuadsPerSensor; i++)
        PyList_SetItem(l,i,get_quad(&cfg->quads(i)));
      PyDict_SetItemString(o,"quads",l); }

    { PyObject* l = PyList_New(MaxQuadsPerSensor);
      ndarray<const Pds::CsPad::ProtectionSystemThreshold,1> pst = cfg->protectionThresholds();
      for(unsigned i=0; i<MaxQuadsPerSensor; i++) {
    PyObject* p = PyDict_New();
        PyDict_SetItemString(p,"adcThreshold",
                             PyLong_FromLong(pst[i].adcThreshold()));
        PyDict_SetItemString(p,"pixelCountThreshold",
                             PyLong_FromLong(pst[i].pixelCountThreshold()));
        PyList_SetItem(l,i,p); 
      }
      PyDict_SetItemString(o,"protectionEnable",
                           PyLong_FromLong(cfg->protectionEnable()));
      PyDict_SetItemString(o,"protectionSystem",l); }

    return o;
  }
  //  Throw an exception
  return NULL;
}
#undef SetMember

//
//  Retrieve configuration data from a Python Dictionary
//
#define SetMember(name)                          \
  unsigned name;                                 \
  { PyObject* i = PyDict_GetItemString(o,#name); \
    if (i)  name = PyLong_AsLong(i);             \
    else    name = cfg->name(); }

#define SetMemberDef(name,default)               \
  unsigned name;                                 \
  { PyObject* i = PyDict_GetItemString(o,#name); \
    if (i)  name = PyLong_AsLong(i);             \
    else    name = default; }

static bool set_quad(ConfigV1QuadReg* cfg,
                     PyObject* o)
{
  uint32_t shiftSelect[TwoByTwosPerQuad];
  { PyObject* l = PyDict_GetItemString(o,"shiftSelect");
    if (l) {
      for(unsigned i=0; i<TwoByTwosPerQuad; i++)
        shiftSelect[i] = PyLong_AsLong(PyList_GetItem(l,i));
    }
    else {
      for(unsigned i=0; i<TwoByTwosPerQuad; i++)
        shiftSelect[i] = cfg->shiftSelect()[i];
    }
  }

  uint32_t edgeSelect[TwoByTwosPerQuad];
  { PyObject* l = PyDict_GetItemString(o,"edgeSelect");
    if (l) {
      for(unsigned i=0; i<TwoByTwosPerQuad; i++)
        edgeSelect[i] = PyLong_AsLong(PyList_GetItem(l,i));
    }
    else {
      for(unsigned i=0; i<TwoByTwosPerQuad; i++)
        edgeSelect[i] = cfg->edgeSelect()[i];
    }
  }

  SetMember(readClkSet);
  SetMember(readClkHold);
  SetMember(dataMode);
  SetMember(prstSel);
  SetMember(acqDelay);
  SetMember(intTime);
  SetMember(digDelay);
  SetMember(ampIdle);
  SetMember(injTotal);
  SetMember(rowColShiftPer);

  uint8_t pots[PotsPerQuad];
  PyObject* l;
  if ((l = PyDict_GetItemString(o,"pots")))
    for(unsigned i=0; i<PotsPerQuad; i++)
      pots[i] = PyLong_AsLong(PyList_GetItem(l,i));

  ndarray<uint16_t,2> gainmap = make_ndarray<uint16_t>(ColumnsPerASIC,MaxRowsPerASIC);
  if ((l = PyDict_GetItemString(o,"gain")))
    for(unsigned i=0; i<ColumnsPerASIC; i++) {
      PyObject* row = PyList_GetItem(l,i);
      for(unsigned j=0; j<MaxRowsPerASIC; j++)
        gainmap[i][j] = PyLong_AsLong(PyList_GetItem(row,j));
    }

  *cfg= ConfigV1QuadReg(shiftSelect,
			edgeSelect,
		        readClkSet,
                        readClkHold,
                        dataMode,
                        prstSel,
                        acqDelay,
                        intTime,
                        digDelay,
                        ampIdle,
                        injTotal,
                        rowColShiftPer,
                        CsPadReadOnlyCfg(),
                        CsPadDigitalPotsCfg(pots),
                        CsPadGainMapCfg(gainmap.data()));

  return true;
}

static bool set_quad(ConfigV2QuadReg* cfg,
                     PyObject* o)
{
  uint32_t shiftSelect[TwoByTwosPerQuad];
  { PyObject* l = PyDict_GetItemString(o,"shiftSelect");
    if (l) {
      for(unsigned i=0; i<TwoByTwosPerQuad; i++)
        shiftSelect[i] = PyLong_AsLong(PyList_GetItem(l,i));
    }
    else {
      for(unsigned i=0; i<TwoByTwosPerQuad; i++)
        shiftSelect[i] = cfg->shiftSelect()[i];
    }
  }

  uint32_t edgeSelect[TwoByTwosPerQuad];
  { PyObject* l = PyDict_GetItemString(o,"edgeSelect");
    if (l) {
      for(unsigned i=0; i<TwoByTwosPerQuad; i++)
        edgeSelect[i] = PyLong_AsLong(PyList_GetItem(l,i));
    }
    else {
      for(unsigned i=0; i<TwoByTwosPerQuad; i++)
        edgeSelect[i] = cfg->edgeSelect()[i];
    }
  }

  SetMember(readClkSet);
  SetMember(readClkHold);
  SetMember(dataMode);
  SetMember(prstSel);
  SetMember(acqDelay);
  SetMember(intTime);
  SetMember(digDelay);
  SetMember(ampIdle);
  SetMember(injTotal);
  SetMember(rowColShiftPer);
  SetMemberDef(ampReset,0);
  SetMemberDef(digCount,0x3fff);
  SetMemberDef(digPeriod,0xc);

  uint8_t pots[PotsPerQuad];
  PyObject* l;
  if ((l = PyDict_GetItemString(o,"pots")))
    for(unsigned i=0; i<PotsPerQuad; i++)
      pots[i] = PyLong_AsLong(PyList_GetItem(l,i));

  ndarray<uint16_t,2> gainmap = make_ndarray<uint16_t>(ColumnsPerASIC,MaxRowsPerASIC);
  if ((l = PyDict_GetItemString(o,"gain")))
    for(unsigned i=0; i<ColumnsPerASIC; i++) {
      PyObject* row = PyList_GetItem(l,i);
      for(unsigned j=0; j<MaxRowsPerASIC; j++)
        gainmap[i][j] = PyLong_AsLong(PyList_GetItem(row,j));
    }


  *cfg= ConfigV2QuadReg(shiftSelect,
			edgeSelect,
		        readClkSet,
                        readClkHold,
                        dataMode,
                        prstSel,
                        acqDelay,
                        intTime,
                        digDelay,
                        ampIdle,
                        injTotal,
                        rowColShiftPer,
                        ampReset,
                        digCount,
                        digPeriod,
                        CsPadReadOnlyCfg(),
                        CsPadDigitalPotsCfg(pots),
                        CsPadGainMapCfg(gainmap.data()));

  return true;
}

static bool set_quad(ConfigV3QuadReg* cfg,
                     PyObject* o)
{
  uint32_t shiftSelect[TwoByTwosPerQuad];
  { PyObject* l = PyDict_GetItemString(o,"shiftSelect");
    if (l) {
      for(unsigned i=0; i<TwoByTwosPerQuad; i++)
        shiftSelect[i] = PyLong_AsLong(PyList_GetItem(l,i));
    }
    else {
      for(unsigned i=0; i<TwoByTwosPerQuad; i++)
        shiftSelect[i] = cfg->shiftSelect()[i];
    }
  }

  uint32_t edgeSelect[TwoByTwosPerQuad];
  { PyObject* l = PyDict_GetItemString(o,"edgeSelect");
    if (l) {
      for(unsigned i=0; i<TwoByTwosPerQuad; i++)
        edgeSelect[i] = PyLong_AsLong(PyList_GetItem(l,i));
    }
    else {
      for(unsigned i=0; i<TwoByTwosPerQuad; i++)
        edgeSelect[i] = cfg->edgeSelect()[i];
    }
  }

  SetMember(readClkSet);
  SetMember(readClkHold);
  SetMember(dataMode);
  SetMember(prstSel);
  SetMember(acqDelay);
  SetMember(intTime);
  SetMember(digDelay);
  SetMember(ampIdle);
  SetMember(injTotal);
  SetMember(rowColShiftPer);
  SetMemberDef(ampReset,0);
  SetMemberDef(digCount,0x3fff);
  SetMemberDef(digPeriod,0xc);
  SetMemberDef(biasTuning,0x3333);
  SetMemberDef(pdpmndnmBalance,0);

  uint8_t pots[PotsPerQuad];
  PyObject* l;
  if ((l = PyDict_GetItemString(o,"pots")))
    for(unsigned i=0; i<PotsPerQuad; i++)
      pots[i] = PyLong_AsLong(PyList_GetItem(l,i));

  ndarray<uint16_t,2> gainmap = make_ndarray<uint16_t>(ColumnsPerASIC,MaxRowsPerASIC);
  if ((l = PyDict_GetItemString(o,"gain")))
    for(unsigned i=0; i<ColumnsPerASIC; i++) {
      PyObject* row = PyList_GetItem(l,i);
      for(unsigned j=0; j<MaxRowsPerASIC; j++)
        gainmap[i][j] = PyLong_AsLong(PyList_GetItem(row,j));
    }

  *cfg= ConfigV3QuadReg(shiftSelect,
            edgeSelect,
                readClkSet,
                        readClkHold,
                        dataMode,
                        prstSel,
                        acqDelay,
                        intTime,
                        digDelay,
                        ampIdle,
                        injTotal,
                        rowColShiftPer,
                        ampReset,
                        digCount,
                        digPeriod,
                        biasTuning,
                        pdpmndnmBalance,
                        CsPadReadOnlyCfg(),
                        CsPadDigitalPotsCfg(pots),
                        CsPadGainMapCfg(gainmap.data()));

  return true;
}

PyObject* pds_CspadConfig_set    (PyObject*   self, PyObject* args)
{
  PyObject* o = 0;
  int icycle = 0;
  PyObject* i;
  if (PyArg_ParseTuple(args,"O|I",&o,&icycle)==0)
    return NULL;

  pdsxtc* xtc = (pdsxtc*)self;

  unsigned isize = pds_CspadConfig_size(self);
  unsigned usize = isize*(icycle+1);

  if (xtc->extent < usize) {
    char* p = new char[usize];
    memcpy(p, xtc->payload, xtc->extent);
    delete[] xtc->payload;

    xtc->payload = p;
    xtc->extent  = usize;
  }

  char* ubegin = xtc->payload + icycle*isize;

  if (xtc->contains.version()==1) {
    ConfigV1* cfg = 
      reinterpret_cast<ConfigV1*>(ubegin);

    SetMember(runDelay);
    SetMember(eventCode);
    SetMember(inactiveRunMode);
    SetMember(activeRunMode);
    SetMember(tdi);
    SetMember(payloadSize);
    SetMember(badAsicMask0);
    SetMember(badAsicMask1);
    SetMember(asicMask);
    SetMember(quadMask);

    ConfigV1QuadReg quads[4];
    PyObject* i = PyDict_GetItemString(o,"quads");
    if (i) {
      for(unsigned q=0; q<PyList_Size(i); q++)
        if (!set_quad(&quads[q],PyList_GetItem(i,q))) {
          Py_DECREF(o);
          return NULL;
        }
    }
  
    new(ubegin) ConfigV1(0,    runDelay, 
                               eventCode,
                               inactiveRunMode,
                               activeRunMode,
                               tdi,
                               payloadSize, 
                               badAsicMask0,
                               badAsicMask1,
                               asicMask,
                               quadMask,
                               quads);
    
  }
  else if (xtc->contains.version()==2) {
    ConfigV2* cfg = 
      reinterpret_cast<ConfigV2*>(ubegin);

    SetMember(runDelay);
    SetMember(eventCode);
    SetMember(inactiveRunMode);
    SetMember(activeRunMode);
    SetMember(tdi);
    SetMember(payloadSize);
    SetMember(badAsicMask0);
    SetMember(badAsicMask1);
    SetMember(asicMask);
    SetMember(quadMask);

    unsigned roiMask = 0;
    PyObject* l = PyDict_GetItemString(o,"roiMask");
    if (l) {
      for(unsigned i=0; i<MaxQuadsPerSensor; i++)
        roiMask |= PyLong_AsLong(PyList_GetItem(l,i)) << (i*ASICsPerQuad/2);
    }
    else {
      for(unsigned i=0; i<MaxQuadsPerSensor; i++)
        roiMask |= cfg->roiMask(i)<<(i*ASICsPerQuad/2);
    }

    ConfigV1QuadReg quads[4];
    PyObject* i = PyDict_GetItemString(o,"quads");
    if (i) {
      for(unsigned q=0; q<PyList_Size(i); q++)
        if (!set_quad(&quads[q],PyList_GetItem(i,q))) {
          Py_DECREF(o);
          return NULL;
        }
    }
  
    new(ubegin) ConfigV2(0,    runDelay, 
                               eventCode,
                               inactiveRunMode,
                               activeRunMode,
                               tdi,
                               payloadSize, 
                               badAsicMask0,
                               badAsicMask1,
                               asicMask,
                               quadMask,
                               roiMask,
                               quads);
    
  }
  else if (xtc->contains.version()==3) {
    ConfigV3* cfg = 
      reinterpret_cast<ConfigV3*>(ubegin);

    SetMember(runDelay);
    SetMember(eventCode);
    SetMember(inactiveRunMode);
    SetMember(activeRunMode);
    SetMember(tdi);
    SetMember(payloadSize);
    SetMember(badAsicMask0);
    SetMember(badAsicMask1);
    SetMember(asicMask);
    SetMember(quadMask);

    unsigned roiMask = 0;
    PyObject* l = PyDict_GetItemString(o,"roiMask");
    if (l) {
      for(unsigned i=0; i<MaxQuadsPerSensor; i++)
        roiMask |= PyLong_AsLong(PyList_GetItem(l,i)) << (i*ASICsPerQuad/2);
    }
    else {
      for(unsigned i=0; i<MaxQuadsPerSensor; i++)
        roiMask |= cfg->roiMask(i)<<(i*ASICsPerQuad/2);
    }

    ProtectionSystemThreshold pth[4];
    { for(unsigned q=0; q<4; q++)
        pth[q] = cfg->protectionThresholds()[q]; }
    PyObject* pst = PyDict_GetItemString(o,"protectionSystem");
    if (pst) {
      for(unsigned q=0; q<PyList_Size(pst); q++) {
	unsigned adcThreshold = pth[q].adcThreshold();
        unsigned pixelCountThreshold = pth[q].pixelCountThreshold();
        PyObject* it = PyList_GetItem(pst,q);
        if ((i=PyDict_GetItemString(it,"adcThreshold")))
          adcThreshold = PyLong_AsLong(i);
        if ((i=PyDict_GetItemString(it,"pixelCountThreshold")))
          pixelCountThreshold = PyLong_AsLong(i);
        pth[q] = ProtectionSystemThreshold(adcThreshold,pixelCountThreshold);
      }
    }    

    unsigned enable=0;
    if((i=PyDict_GetItemString(o,"protectionEnable")))
      enable = PyLong_AsLong(i);

    ConfigV1QuadReg quads[4];
    PyObject* i = PyDict_GetItemString(o,"quads");
    if (i) {
      for(unsigned q=0; q<PyList_Size(i); q++)
        if (!set_quad(&quads[q],PyList_GetItem(i,q))) {
          Py_DECREF(o);
          return NULL;
        }
    }
  
    new(ubegin) ConfigV3(0,    runDelay, 
                               eventCode,
                               pth, enable,
                               inactiveRunMode,
                               activeRunMode,
                               tdi,
                               payloadSize, 
                               badAsicMask0,
                               badAsicMask1,
                               asicMask,
                               quadMask,
                               roiMask,
                               quads);
    
  }
  else if (xtc->contains.version()==4) {
    ConfigV4* cfg = 
      reinterpret_cast<ConfigV4*>(ubegin);

    SetMember(runDelay);
    SetMember(eventCode);
    SetMember(inactiveRunMode);
    SetMember(activeRunMode);
    SetMember(tdi);
    SetMember(payloadSize);
    SetMember(badAsicMask0);
    SetMember(badAsicMask1);
    SetMember(asicMask);
    SetMember(quadMask);

    unsigned roiMask = 0;
    PyObject* l = PyDict_GetItemString(o,"roiMask");
    if (l) {
      for(unsigned i=0; i<MaxQuadsPerSensor; i++)
        roiMask |= PyLong_AsLong(PyList_GetItem(l,i)) << (i*ASICsPerQuad/2);
    }
    else {
      for(unsigned i=0; i<MaxQuadsPerSensor; i++)
        roiMask |= cfg->roiMask(i)<<(i*ASICsPerQuad/2);
    }

    ProtectionSystemThreshold pth[4];
    { for(unsigned q=0; q<4; q++)
        pth[q] = cfg->protectionThresholds()[q]; }
    PyObject* pst = PyDict_GetItemString(o,"protectionSystem");
    if (pst) {
      for(unsigned q=0; q<PyList_Size(pst); q++) {
	unsigned adcThreshold        = pth[q].adcThreshold();
        unsigned pixelCountThreshold = pth[q].pixelCountThreshold();
        PyObject* it = PyList_GetItem(pst,q);
        if ((i=PyDict_GetItemString(it,"adcThreshold")))
          adcThreshold = PyLong_AsLong(i);
        if ((i=PyDict_GetItemString(it,"pixelCountThreshold")))
          pixelCountThreshold = PyLong_AsLong(i);
        pth[q] = ProtectionSystemThreshold(adcThreshold,pixelCountThreshold);
      }
    }    

    unsigned enable=0;
    if((i=PyDict_GetItemString(o,"protectionEnable")))
      enable = PyLong_AsLong(i);

    ConfigV2QuadReg quads[4];
    PyObject* i = PyDict_GetItemString(o,"quads");
    if (i) {
      for(unsigned q=0; q<PyList_Size(i); q++)
        if (!set_quad(&quads[q],PyList_GetItem(i,q))) {
          Py_DECREF(o);
          return NULL;
        }
    }
  
    new(ubegin) ConfigV4(0,    runDelay, 
              	               eventCode,
                               pth, enable,
                 	       inactiveRunMode,
                               activeRunMode,
                               tdi,
                               payloadSize, 
                               badAsicMask0,
                               badAsicMask1,
                               asicMask,
                               quadMask,
                               roiMask,
                               quads);
    
  }
  else if (xtc->contains.version()==5) {
    ConfigV5* cfg = 
      reinterpret_cast<ConfigV5*>(ubegin);

    SetMember(runDelay);
    SetMember(eventCode);
    SetMember(inactiveRunMode);
    SetMember(activeRunMode);
    SetMember(internalTriggerDelay);
    SetMember(tdi);
    SetMember(payloadSize);
    SetMember(badAsicMask0);
    SetMember(badAsicMask1);
    SetMember(asicMask);
    SetMember(quadMask);

    unsigned roiMask = 0;
    PyObject* l = PyDict_GetItemString(o,"roiMask");
    if (l) {
      for(unsigned i=0; i<MaxQuadsPerSensor; i++)
        roiMask |= PyLong_AsLong(PyList_GetItem(l,i)) << (i*ASICsPerQuad/2);
    }
    else {
      for(unsigned i=0; i<MaxQuadsPerSensor; i++)
        roiMask |= cfg->roiMask(i)<<(i*ASICsPerQuad/2);
    }

    ProtectionSystemThreshold pth[4];
    { for(unsigned q=0; q<4; q++)
        pth[q] = cfg->protectionThresholds()[q]; }
    PyObject* pst = PyDict_GetItemString(o,"protectionSystem");
    if (pst) {
      for(unsigned q=0; q<PyList_Size(pst); q++) {
	unsigned adcThreshold        = pth[q].adcThreshold();
        unsigned pixelCountThreshold = pth[q].pixelCountThreshold();
        PyObject* it = PyList_GetItem(pst,q);
        if ((i=PyDict_GetItemString(it,"adcThreshold")))
          adcThreshold = PyLong_AsLong(i);
        if ((i=PyDict_GetItemString(it,"pixelCountThreshold")))
          pixelCountThreshold = PyLong_AsLong(i);
        pth[q] = ProtectionSystemThreshold(adcThreshold,pixelCountThreshold);
      }
    }    

    unsigned enable=0;
    if((i=PyDict_GetItemString(o,"protectionEnable")))
      enable = PyLong_AsLong(i);

    ConfigV3QuadReg quads[4];
    PyObject* i = PyDict_GetItemString(o,"quads");
    if (i) {
      for(unsigned q=0; q<PyList_Size(i); q++)
        if (!set_quad(&quads[q],PyList_GetItem(i,q))) {
          Py_DECREF(o);
          return NULL;
        }
    }
  
    new(ubegin) ConfigV5(0, runDelay, 
                         eventCode,
                         pth, enable,
                         inactiveRunMode,
                         activeRunMode,
                         internalTriggerDelay,
                         tdi,
                         payloadSize, 
                         badAsicMask0,
                         badAsicMask1,
                         asicMask,
                         quadMask,
                         roiMask,
                         quads);
    
  }
  else {
    return NULL;
  }

  Py_INCREF(Py_None);
  return Py_None;
}

#undef SetMember

unsigned pds_CspadConfig_size(PyObject* self)
{
  pdsxtc* xtc = (pdsxtc*)self;
  if (xtc->contains.id() == Pds::TypeId::Id_CspadConfig) {
    switch(xtc->contains.version()) {
      case 1:  return sizeof(Pds::CsPad::ConfigV1);
      case 2:  return sizeof(Pds::CsPad::ConfigV2);
      case 3:  return sizeof(Pds::CsPad::ConfigV3);
      case 4:  return sizeof(Pds::CsPad::ConfigV4);
      case 5:  return sizeof(Pds::CsPad::ConfigV5);
     default: break;
    }
  }

  return 0;
}
