#include "pdsapp/config/Parameters.hh"

#include "pdsapp/config/ParameterSet.hh"
#include "pdsapp/config/Validators.hh"

#include <QtGui/QHBoxLayout>
#include <QtGui/QLabel>
#include <QtGui/QLineEdit>
#include <QtGui/QComboBox>

using namespace Pds_ConfigDb;

template <class T>
NumericInt<T>::NumericInt(const char* label, T val, T vlo, T vhi, IntMode mo) :
  Parameter(label),
  value(val),
  mode (mo)
{
  range[0]=vlo;
  range[1]=vhi;
}

template <class T>
NumericInt<T>::~NumericInt() 
{
}

template <class T>
QLayout* NumericInt<T>::initialize(QWidget* parent)  
{
  QHBoxLayout* layout = new QHBoxLayout;
  layout->addWidget(new QLabel(_label));             
  if (allowEdit()) {
    layout->addWidget(_input = new QLineEdit(parent));  
    _input->setReadOnly(!allowEdit());
    flush();
    if (mode==Decimal)
      _input->setValidator(new IntValidator( *this, *_input, range[0], range[1]));
    else
      _input->setValidator(new HexValidator( *this, *_input, range[0], range[1]));
  }
  else {
    _display = new QLabel(QString::number(value,mode==Decimal ? 10:16));
    _display->setFrameShape(QFrame::Box);
    layout->addWidget(_display);
  }
  layout->setContentsMargins(0,0,0,0);               
  return layout;                                     
}

template <class T>
void NumericInt<T>::update()
{
  if (allowEdit()) {
    bool ok;
    value = (mode==Decimal) ? _input->text().toInt() : _input->text().toInt(&ok,16);
  }
}

template <class T>
void NumericInt<T>::flush()
{
  if (allowEdit())
    _input->setText(QString::number(value,mode==Decimal ? 10:16));            
  else
    _display->setText(QString::number(value,mode==Decimal ? 10:16));            
}

template <class T>
bool NumericInt<T>::connect(ParameterSet& set)
{
  return QObject::connect(_input, SIGNAL(editingFinished()),
	 	          &set, SLOT(membersChanged()));
}

template <class T>
unsigned NumericInt<T>::count()
{
  return value;
}

template <class T>
NumericFloat<T>::NumericFloat(const char* label, T val, T vlo, T vhi) :
  Parameter(label),
  value(val) 
{
  range[0] = vlo;
  range[1] = vhi;
}

template <class T>
NumericFloat<T>::~NumericFloat() 
{
}

template <class T>
QLayout* NumericFloat<T>::initialize(QWidget* parent)  
{
  QHBoxLayout* layout = new QHBoxLayout;
  layout->addWidget(new QLabel(_label));             
  if (allowEdit()) {
    layout->addWidget(_input = new QLineEdit(parent));  
    _input->setReadOnly(!allowEdit());
    flush();
    _input->setValidator( new DoubleValidator( *this, *_input,
	  				       range[0], range[1]) );
  }
  else {
    _display = new QLabel(QString::number(value));
    _display->setFrameShape(QFrame::Box);
    layout->addWidget(_display);
  }
  layout->setContentsMargins(0,0,0,0);               
  return layout;                                     
}

template <class T>
void NumericFloat<T>::update()
{
  if (allowEdit())
    value = _input->text().toDouble();
}

template <class T>
void NumericFloat<T>::flush()
{
  if (allowEdit())
    _input->setText(QString::number(value));
  else
    _display->setText(QString::number(value));
}

template <class T>
Enumerated<T>::Enumerated(const char* label, T val, const char** strlist) :
  Parameter(label),
  value (val),
  labels(strlist)
{
}

template <class T>
Enumerated<T>::~Enumerated() 
{
}

template <class T>
QLayout* Enumerated<T>::initialize(QWidget* parent)
{
  QHBoxLayout* layout = new QHBoxLayout;
  layout->addWidget(new QLabel(_label));
  if (allowEdit()) {
    layout->addWidget(_input = new QComboBox(parent));
    int k=0;
    while( labels[k] )
      _input->addItem(labels[k++]);
    flush();
  }
  else {
    _display = new QLabel(labels[value]);
    _display->setFrameShape(QFrame::Box);
    layout->addWidget(_display);
  }
  layout->setContentsMargins(0,0,0,0);
  return layout;
}

template <class T>
void Enumerated<T>::update()
{
  if (allowEdit())
    value = (T)_input->currentIndex();
}

template <class T>
void Enumerated<T>::flush()
{
  if (allowEdit())
    _input->setCurrentIndex(value);
  else
    _display->setText(labels[value]);
}
