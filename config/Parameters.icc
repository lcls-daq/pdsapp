#include "pdsapp/config/Parameters.hh"

#include "pdsapp/config/ParameterSet.hh"
#include "pdsapp/config/Validators.hh"

#include <QtGui/QHBoxLayout>
#include <QtGui/QGridLayout>
#include <QtGui/QLabel>
#include <QtGui/QLineEdit>
#include <QtGui/QComboBox>
#include <QtGui/QPushButton>
#include <QtGui/QDialog>

#include <fstream>

using namespace Pds_ConfigDb;

template <class T>
NumericInt<T>::NumericInt(const char* label, T val, T vlo, T vhi, IntMode mo, double sca) :
  Parameter(label),
  value(val),
  mode (mo),
  scale(sca)
{
  range[0]=vlo;
  range[1]=vhi;
}

template <class T>
NumericInt<T>::~NumericInt() 
{
}

template <class T>
QLayout* NumericInt<T>::initialize(QWidget* parent)  
{
  QHBoxLayout* layout = new QHBoxLayout;
  if (_label)
    layout->addWidget(new QLabel(_label));             
  if (allowEdit()) {
    layout->addWidget(_input = new QLineEdit(parent));  
    _input->setReadOnly(!allowEdit());
    flush();
    switch(mode) {
    case Decimal:
      _input->setValidator(new IntValidator( *this, *_input, range[0], range[1]));
      break;
    case Hex:
      _input->setValidator(new HexValidator( *this, *_input, range[0], range[1]));
      break;
    default:
      _input->setValidator(new DoubleValidator( *this, *_input, range[0]*scale, range[1]*scale));
    }
  }
  else {
    switch(mode) {
    case Decimal: _display = new QLabel(QString::number(value,10)); break;
    case Hex:     _display = new QLabel(QString::number(value,16)); break;
    default:      _display = new QLabel(QString::number(double(value)*scale)); break;
    }
    _display->setFrameShape(QFrame::Box);
    layout->addWidget(_display);
  }
  layout->setContentsMargins(0,0,0,0);               
  return layout;                                     
}

template <class T>
void NumericInt<T>::update()
{
  if (allowEdit()) {
    bool ok;
    switch(mode) {
    case Decimal:  value = _input->text().toInt(); break;
    case Hex:      value = _input->text().toUInt(&ok,16); break;
    default:       value = int(_input->text().toDouble(&ok)/scale + 0.5); break;
    }
  }
}

template <class T>
void NumericInt<T>::flush()
{
  QString v;
  switch(mode) {
    case Decimal: v = QString::number(value,10); break;
    case Hex:	  v = QString::number(value,16); break;
    default:      v = QString::number(double(value)*scale); break;
  }

  if (allowEdit())
    _input->setText(v);
  else
    _display->setText(v);
}

template <class T>
void NumericInt<T>::enable(bool v)
{
  if (allowEdit())
    _input->setReadOnly(!v);
}

template <class T>
bool NumericInt<T>::connect(ParameterSet& set)
{
  return QObject::connect(_input, SIGNAL(editingFinished()),
	 	          set._qset, SLOT(membersChanged()));
}

template <class T>
unsigned NumericInt<T>::count()
{
  return value;
}

template <class T>
QWidget* NumericInt<T>::widget()
{
  return allowEdit() ? static_cast<QWidget*>(_input) : static_cast<QWidget*>(_display);
}


template <class T>
NumericFloat<T>::NumericFloat() {}

template <class T>
NumericFloat<T>::NumericFloat(const char* label, T val, T vlo, T vhi) :
  Parameter(label),
  value(val) 
{
  range[0] = vlo;
  range[1] = vhi;
}

template <class T>
NumericFloat<T>::~NumericFloat() 
{
}

template <class T>
NumericFloat<T>& NumericFloat<T>::operator=(const NumericFloat<T>& c)
{
  _label   = c._label;
  value    = c.value;
  range[0] = c.range[0];
  range[1] = c.range[1];
  return *this;
}

template <class T>
QLayout* NumericFloat<T>::initialize(QWidget* parent)  
{
  QHBoxLayout* layout = new QHBoxLayout;
  if (_label)
    layout->addWidget(new QLabel(_label));             
  if (allowEdit()) {
    layout->addWidget(_input = new QLineEdit(parent));  
    _input->setReadOnly(!allowEdit());
    flush();
    _input->setValidator( new DoubleValidator( *this, *_input,
	  				       range[0], range[1]) );
  }
  else {
    _display = new QLabel(QString::number(value));
    _display->setFrameShape(QFrame::Box);
    layout->addWidget(_display);
  }
  layout->setContentsMargins(0,0,0,0);               
  return layout;                                     
}

template <class T>
void NumericFloat<T>::update()
{
  if (allowEdit())
    value = _input->text().toDouble();
}

template <class T>
void NumericFloat<T>::flush()
{
  if (allowEdit())
    _input->setText(QString::number(value));
  else
    _display->setText(QString::number(value));
}

template <class T>
void NumericFloat<T>::enable(bool v)
{
  if (allowEdit())
    _input->setReadOnly(!v);
}

template <class T>
Enumerated<T>::Enumerated(const char* label, T val,
                          const char** strlist) :
  Parameter(label),
  value (val),
  labels(strlist),
  values(0)
{
}

template <class T>
Enumerated<T>::Enumerated(const char* label, T val, 
                          const char** strlist,
                          const T*     vallist) :
  Parameter(label),
  value (val),
  labels(strlist),
  values(vallist)
{
}

template <class T>
Enumerated<T>::~Enumerated() 
{
}

template <class T>
QLayout* Enumerated<T>::initialize(QWidget* parent)
{
  QHBoxLayout* layout = new QHBoxLayout;
  if (_label)
    layout->addWidget(new QLabel(_label));
  if (allowEdit()) {
    layout->addWidget(_input = new QComboBox(parent));
    int k=0;
    while( labels[k] ) {
      if (values) 
        _input->addItem(labels[k],values[k]);
      else
        _input->addItem(labels[k]);
      k++;
    }
    flush();
  }
  else {
    _display = new QLabel(labels[value]);
    _display->setFrameShape(QFrame::Box);
    layout->addWidget(_display);
  }
  layout->setContentsMargins(0,0,0,0);
  return layout;
}

template <class T>
void Enumerated<T>::update()
{
  if (allowEdit()) {
    if (values)
      value = (T)_input->itemData(_input->currentIndex()).toInt();
    else
      value = (T)_input->currentIndex();
  }	
}

template <class T>
void Enumerated<T>::flush()
{
  if (allowEdit()) {
    if (values)
      _input->setCurrentIndex(_input->findData(value));
    else
      _input->setCurrentIndex(value);
  }
  else {
    if (values) {
      for(unsigned i=0; labels[i]; i++)
        if (values[i]==value) {
          _display->setText(labels[i]);
          break;
        }
    }
    else
      _display->setText(labels[value]);
  }
}

template <class T>
void Enumerated<T>::enable(bool v)
{
  if (allowEdit())
    _input->setEnabled(v);
}


template <class T, int N>
NumericIntArray<T,N>::NumericIntArray(const char* label, T val, T vlo, T vhi, IntMode mo, double sca) :
  Parameter(label),
  mode (mo),
  scale(sca)
{
  for(int i=0; i<N; i++) value[i]=val;
  range[0]=vlo;
  range[1]=vhi;
}

template <class T, int N>
NumericIntArray<T,N>::~NumericIntArray() 
{
}

template <class T, int N>
QLayout* NumericIntArray<T,N>::initialize(QWidget* parent)  
{
  QHBoxLayout* layout = new QHBoxLayout;
  if (_label)
    layout->addWidget(new QLabel(_label));             
  if (allowEdit()) {
    for(int i=0; i<N; i++) {
      layout->addWidget(_input[i] = new QLineEdit(parent));  
      _input[i]->setReadOnly(!allowEdit());
    }
    flush();
    for(int i=0; i<N; i++) {
      switch(mode) {
      case Decimal:
        _input[i]->setValidator(new IntValidator( *this, *_input[i], range[0], range[1]));
        break;
      case Hex:
        _input[i]->setValidator(new HexValidator( *this, *_input[i], range[0], range[1]));
        break;
      default:
        _input[i]->setValidator(new DoubleValidator( *this, *_input[i], range[0]*scale, range[1]*scale));
      }
    }
  }
  else {
    for(int i=0; i<N; i++) {
      switch(mode) {
      case Decimal: _display[i] = new QLabel(QString::number(value[i],10)); break;
      case Hex:     _display[i] = new QLabel(QString::number(value[i],16)); break;
      default:      _display[i] = new QLabel(QString::number(double(value[i])*scale)); break;
      }
      _display[i]->setFrameShape(QFrame::Box);
      layout->addWidget(_display[i]);
    }
  }
  layout->setContentsMargins(0,0,0,0);               
  return layout;                                     
}

template <class T, int N>
void NumericIntArray<T,N>::update()
{
  if (allowEdit()) {
    for(int i=0; i<N; i++) {
      bool ok;
      switch(mode) {
      case Decimal:  value[i] = _input[i]->text().toInt(); break;
      case Hex:      value[i] = _input[i]->text().toInt(&ok,16); break;
      default:       value[i] = int(_input[i]->text().toDouble(&ok)/scale + 0.5); break;
      }
    }
  }
}

template <class T, int N>
void NumericIntArray<T,N>::flush()
{
  for(int i=0; i<N; i++) {
    QString v;
    switch(mode) {
      case Decimal: v = QString::number(value[i],10); break;
      case Hex:	    v = QString::number(value[i],16); break;
      default:      v = QString::number(double(value[i])*scale); break;
    }
    if (allowEdit())
      _input[i]->setText(v);
    else
      _display[i]->setText(v);
  }
}

template <class T, int N>
void NumericIntArray<T,N>::enable(bool v)
{
  if (allowEdit())
    for(int i=0; i<N; i++)
      _input[i]->setReadOnly(!v);
}

template <class T, int N>
void NumericIntArray<T,N>::setWidth(unsigned w)
{
  for(int i=0; i<N; i++) {
    if (allowEdit()) _input  [i]->setMaximumWidth(w);
    else             _display[i]->setMaximumWidth(w);
  }
}

template <class T>
Poly<T>::Poly(const char* label) : ParameterFile(label) {}

template <class T>
Poly<T>::~Poly() { delete _dialog; }

template <class T>
QLayout* Poly<T>::initialize(QWidget*)
{
  QGridLayout* l = new QGridLayout;
  l->addWidget(_display = new QLabel(QString("%1 (%2)")
				     .arg(_label)
				     .arg(value.size())),
	       0,0,1,2,Qt::AlignHCenter);
  l->addWidget(_import = new QPushButton("Import"),1,0);
  l->addWidget(_export = new QPushButton("Export"),1,1);

  _dialog = new PolyDialog(*this);

  QObject::connect(_import, SIGNAL(clicked()), _dialog, SLOT(mport()));
  QObject::connect(_export, SIGNAL(clicked()), _dialog, SLOT(xport()));

  return l;
}

template <class T>
void Poly<T>::update() {}

template <class T>
void Poly<T>::flush() 
{
  _display->setText(QString("%1 (%2)")
                    .arg(_label)
                    .arg(value.size()));
}

template <class T>
void Poly<T>::enable(bool v)
{
  _import->setEnabled(v);
  _export->setEnabled(v);
}

template <class T>
void Poly<T>::mport(const QString& fname)
{
  std::ifstream f(qPrintable(fname));
  if (f.good()) {
    std::vector<T> a;
    T v;
    while(1) {
      f >> v; 
      if (!f.good()) break;
      a.push_back(v); }
    value = a;
    _display->setText(QString("%1 (%2)")
                      .arg(_label)
                      .arg(value.size()));
  }
}

template <class T>
void Poly<T>::xport(const QString& fname) const
{
  std::ofstream f(qPrintable(fname));
  if (f.good()) {
    for(unsigned i=0; i<value.size(); i++)
      f << value[i] << ' ';
  }
}
