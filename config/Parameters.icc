#include "pdsapp/config/Parameters.hh"

#include "pdsapp/config/ParameterSet.hh"
#include "pdsapp/config/Validators.hh"

#include <QtGui/QHBoxLayout>
#include <QtGui/QGridLayout>
#include <QtGui/QLabel>
#include <QtGui/QLineEdit>
#include <QtGui/QComboBox>
#include <QtGui/QPushButton>
#include <QtGui/QDialog>

#include <fstream>

using namespace Pds_ConfigDb;

template <class T>
Enumerated<T>::Enumerated(const char* label, T val,
                          const char** strlist) :
  Parameter(label),
  value (val),
  labels(strlist),
  values(0)
{
}

template <class T>
Enumerated<T>::Enumerated(const char* label, T val, 
                          const char** strlist,
                          const T*     vallist) :
  Parameter(label),
  value (val),
  labels(strlist),
  values(vallist)
{
}

template <class T>
Enumerated<T>::~Enumerated() 
{
}

template <class T>
QLayout* Enumerated<T>::initialize(QWidget* parent)
{
  QHBoxLayout* layout = new QHBoxLayout;
  if (_label)
    layout->addWidget(new QLabel(_label));
  if (allowEdit()) {
    layout->addWidget(_input = new QComboBox(parent));
    int k=0;
    while( labels[k] ) {
      if (values) 
        _input->addItem(labels[k],values[k]);
      else
        _input->addItem(labels[k]);
      k++;
    }
    flush();
  }
  else {
    _display = new QLabel(labels[value]);
    _display->setFrameShape(QFrame::Box);
    layout->addWidget(_display);
  }
  layout->setContentsMargins(0,0,0,0);
  return layout;
}

template <class T>
void Enumerated<T>::update()
{
  if (allowEdit()) {
    if (values)
      value = (T)_input->itemData(_input->currentIndex()).toInt();
    else
      value = (T)_input->currentIndex();
  }	
}

template <class T>
void Enumerated<T>::flush()
{
  if (allowEdit()) {
    if (values)
      _input->setCurrentIndex(_input->findData(value));
    else
      _input->setCurrentIndex(value);
  }
  else {
    if (values) {
      for(unsigned i=0; labels[i]; i++)
        if (values[i]==value) {
          _display->setText(labels[i]);
          break;
        }
    }
    else
      _display->setText(labels[value]);
  }
}

template <class T>
void Enumerated<T>::enable(bool v)
{
  if (allowEdit())
    _input->setEnabled(v);
}

template <class T>
Enumerated<T>& Enumerated<T>::operator=(const Enumerated<T>& o)
{
  value = o.value;
  flush();
  return *this;
}

template <class T, int N>
NumericIntArray<T,N>::NumericIntArray(const char* label, T val, T vlo, T vhi, 
                                      IntMode mo, double sca, unsigned row) :
  Parameter(label),
  mode (mo),
  scale(sca),
  rows(row)
{
  for(int i=0; i<N; i++) value[i]=val;
  range[0]=vlo;
  range[1]=vhi;
}

template <class T, int N>
NumericIntArray<T,N>::~NumericIntArray() 
{
}

template <class T, int N>
QLayout* NumericIntArray<T,N>::initialize(QWidget* parent)  
{
  QLayout* ret = 0;
  if (rows>1) {
    QVBoxLayout* vl = new QVBoxLayout;
    for(unsigned r=0; r<rows; r++)
      vl->addLayout(initialize(parent,r));
    vl->setContentsMargins(0,0,0,0);               
    ret = vl;
  }
  else
    ret = initialize(parent,0);
  return ret;
}

template <class T, int N>
QLayout* NumericIntArray<T,N>::initialize(QWidget* parent, unsigned row)  
{
  const unsigned ilo = row*N/rows;
  const unsigned ihi = (row+1)*N/rows;
  QHBoxLayout* layout = new QHBoxLayout;
  if (_label)
    layout->addWidget(new QLabel(_label));             
  if (allowEdit()) {
    for(unsigned i=ilo; i<ihi; i++) {
      layout->addWidget(_input[i] = new QLineEdit(parent));  
      _input[i]->setReadOnly(!allowEdit());
    }
    if (row == rows-1)
      flush();
    for(unsigned i=ilo; i<ihi; i++) {
      switch(mode) {
      case Decimal:
        _input[i]->setValidator(new IntValidator( *this, *_input[i], range[0], range[1]));
        break;
      case Hex:
        _input[i]->setValidator(new HexValidator( *this, *_input[i], range[0], range[1]));
        break;
      default:
        _input[i]->setValidator(new DoubleValidator( *this, *_input[i], range[0]*scale, range[1]*scale));
      }
    }
  }
  else {
    for(unsigned i=ilo; i<ihi; i++) {
      switch(mode) {
      case Decimal: _display[i] = new QLabel(QString::number(value[i],10)); break;
      case Hex:     _display[i] = new QLabel(QString::number(value[i],16)); break;
      default:      _display[i] = new QLabel(QString::number(double(value[i])*scale)); break;
      }
      _display[i]->setFrameShape(QFrame::Box);
      layout->addWidget(_display[i]);
    }
  }
  layout->setContentsMargins(0,0,0,0);               
  return layout;                                     
}

template <class T, int N>
void NumericIntArray<T,N>::update()
{
  if (allowEdit()) {
    for(int i=0; i<N; i++) {
      bool ok;
      switch(mode) {
      case Decimal:  value[i] = _input[i]->text().toInt(); break;
      case Hex:      value[i] = _input[i]->text().toInt(&ok,16); break;
      default:       value[i] = int(_input[i]->text().toDouble(&ok)/scale + 0.5); break;
      }
    }
  }
}

template <class T, int N>
void NumericIntArray<T,N>::flush()
{
  for(int i=0; i<N; i++) {
    QString v;
    switch(mode) {
      case Decimal: v = QString::number(value[i],10); break;
      case Hex:	    v = QString::number(value[i],16); break;
      default:      v = QString::number(double(value[i])*scale); break;
    }
    if (allowEdit())
      _input[i]->setText(v);
    else
      _display[i]->setText(v);
  }
}

template <class T, int N>
void NumericIntArray<T,N>::enable(bool v)
{
  if (allowEdit())
    for(int i=0; i<N; i++)
      _input[i]->setReadOnly(!v);
}

template <class T, int N>
void NumericIntArray<T,N>::setWidth(unsigned w)
{
  for(int i=0; i<N; i++) {
    if (allowEdit()) _input  [i]->setMaximumWidth(w);
    else             _display[i]->setMaximumWidth(w);
  }
}

template <class T, int N>
NumericIntArray<T,N>& NumericIntArray<T,N>::operator=(const NumericIntArray<T,N>& o)
{
  for(int i=0; i<N; i++)
    value[i] = o.value[i];
  flush();
  return *this;
}


